// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_action (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_din_gmem_V_AWVALID,
        m_axi_din_gmem_V_AWREADY,
        m_axi_din_gmem_V_AWADDR,
        m_axi_din_gmem_V_AWID,
        m_axi_din_gmem_V_AWLEN,
        m_axi_din_gmem_V_AWSIZE,
        m_axi_din_gmem_V_AWBURST,
        m_axi_din_gmem_V_AWLOCK,
        m_axi_din_gmem_V_AWCACHE,
        m_axi_din_gmem_V_AWPROT,
        m_axi_din_gmem_V_AWQOS,
        m_axi_din_gmem_V_AWREGION,
        m_axi_din_gmem_V_AWUSER,
        m_axi_din_gmem_V_WVALID,
        m_axi_din_gmem_V_WREADY,
        m_axi_din_gmem_V_WDATA,
        m_axi_din_gmem_V_WSTRB,
        m_axi_din_gmem_V_WLAST,
        m_axi_din_gmem_V_WID,
        m_axi_din_gmem_V_WUSER,
        m_axi_din_gmem_V_ARVALID,
        m_axi_din_gmem_V_ARREADY,
        m_axi_din_gmem_V_ARADDR,
        m_axi_din_gmem_V_ARID,
        m_axi_din_gmem_V_ARLEN,
        m_axi_din_gmem_V_ARSIZE,
        m_axi_din_gmem_V_ARBURST,
        m_axi_din_gmem_V_ARLOCK,
        m_axi_din_gmem_V_ARCACHE,
        m_axi_din_gmem_V_ARPROT,
        m_axi_din_gmem_V_ARQOS,
        m_axi_din_gmem_V_ARREGION,
        m_axi_din_gmem_V_ARUSER,
        m_axi_din_gmem_V_RVALID,
        m_axi_din_gmem_V_RREADY,
        m_axi_din_gmem_V_RDATA,
        m_axi_din_gmem_V_RLAST,
        m_axi_din_gmem_V_RID,
        m_axi_din_gmem_V_RUSER,
        m_axi_din_gmem_V_RRESP,
        m_axi_din_gmem_V_BVALID,
        m_axi_din_gmem_V_BREADY,
        m_axi_din_gmem_V_BRESP,
        m_axi_din_gmem_V_BID,
        m_axi_din_gmem_V_BUSER,
        din_gmem_V_offset,
        dout_gmem_V_offset,
        act_reg_Data_in_addr,
        act_reg_Data_in_size,
        act_reg_Data_out_add
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state18 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_din_gmem_V_AWVALID;
input   m_axi_din_gmem_V_AWREADY;
output  [63:0] m_axi_din_gmem_V_AWADDR;
output  [0:0] m_axi_din_gmem_V_AWID;
output  [31:0] m_axi_din_gmem_V_AWLEN;
output  [2:0] m_axi_din_gmem_V_AWSIZE;
output  [1:0] m_axi_din_gmem_V_AWBURST;
output  [1:0] m_axi_din_gmem_V_AWLOCK;
output  [3:0] m_axi_din_gmem_V_AWCACHE;
output  [2:0] m_axi_din_gmem_V_AWPROT;
output  [3:0] m_axi_din_gmem_V_AWQOS;
output  [3:0] m_axi_din_gmem_V_AWREGION;
output  [0:0] m_axi_din_gmem_V_AWUSER;
output   m_axi_din_gmem_V_WVALID;
input   m_axi_din_gmem_V_WREADY;
output  [511:0] m_axi_din_gmem_V_WDATA;
output  [63:0] m_axi_din_gmem_V_WSTRB;
output   m_axi_din_gmem_V_WLAST;
output  [0:0] m_axi_din_gmem_V_WID;
output  [0:0] m_axi_din_gmem_V_WUSER;
output   m_axi_din_gmem_V_ARVALID;
input   m_axi_din_gmem_V_ARREADY;
output  [63:0] m_axi_din_gmem_V_ARADDR;
output  [0:0] m_axi_din_gmem_V_ARID;
output  [31:0] m_axi_din_gmem_V_ARLEN;
output  [2:0] m_axi_din_gmem_V_ARSIZE;
output  [1:0] m_axi_din_gmem_V_ARBURST;
output  [1:0] m_axi_din_gmem_V_ARLOCK;
output  [3:0] m_axi_din_gmem_V_ARCACHE;
output  [2:0] m_axi_din_gmem_V_ARPROT;
output  [3:0] m_axi_din_gmem_V_ARQOS;
output  [3:0] m_axi_din_gmem_V_ARREGION;
output  [0:0] m_axi_din_gmem_V_ARUSER;
input   m_axi_din_gmem_V_RVALID;
output   m_axi_din_gmem_V_RREADY;
input  [511:0] m_axi_din_gmem_V_RDATA;
input   m_axi_din_gmem_V_RLAST;
input  [0:0] m_axi_din_gmem_V_RID;
input  [0:0] m_axi_din_gmem_V_RUSER;
input  [1:0] m_axi_din_gmem_V_RRESP;
input   m_axi_din_gmem_V_BVALID;
output   m_axi_din_gmem_V_BREADY;
input  [1:0] m_axi_din_gmem_V_BRESP;
input  [0:0] m_axi_din_gmem_V_BID;
input  [0:0] m_axi_din_gmem_V_BUSER;
input  [57:0] din_gmem_V_offset;
input  [57:0] dout_gmem_V_offset;
input  [63:0] act_reg_Data_in_addr;
input  [31:0] act_reg_Data_in_size;
input  [63:0] act_reg_Data_out_add;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_din_gmem_V_AWVALID;
reg m_axi_din_gmem_V_WVALID;
reg m_axi_din_gmem_V_ARVALID;
reg m_axi_din_gmem_V_RREADY;
reg m_axi_din_gmem_V_BREADY;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] shift_reg_2;
reg   [7:0] shift_reg_1;
reg   [7:0] shift_reg_0;
reg    din_gmem_V_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln46_reg_1938;
reg    din_gmem_V_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter7_reg;
reg    din_gmem_V_blk_n_AW;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter8_reg;
reg    din_gmem_V_blk_n_W;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter9_reg;
reg    din_gmem_V_blk_n_B;
reg    ap_enable_reg_pp0_iter15;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter14_reg;
reg   [31:0] size_0_reg_390;
reg   [63:0] i_idx_0_reg_399;
reg   [63:0] o_idx_0_reg_408;
wire   [63:0] dout_gmem_V_offset_c_fu_417_p1;
reg   [63:0] dout_gmem_V_offset_c_reg_1918;
wire   [63:0] din_gmem_V_offset_ca_fu_421_p1;
reg   [63:0] din_gmem_V_offset_ca_reg_1923;
wire   [63:0] i_idx_1_fu_435_p1;
wire   [63:0] o_idx_1_fu_449_p1;
wire   [0:0] icmp_ln46_fu_453_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_state11_io;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
reg    ap_block_state17_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter1_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter2_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter3_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter4_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter5_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter6_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter10_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter11_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter12_reg;
reg   [0:0] icmp_ln46_reg_1938_pp0_iter13_reg;
wire   [63:0] add_ln59_fu_491_p2;
reg   [63:0] add_ln59_reg_1942;
wire   [63:0] add_ln79_fu_496_p2;
reg   [63:0] add_ln79_reg_1947;
reg   [63:0] add_ln79_reg_1947_pp0_iter1_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter2_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter3_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter4_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter5_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter6_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter7_reg;
reg   [63:0] add_ln79_reg_1947_pp0_iter8_reg;
wire   [31:0] size_fu_501_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] i_idx_2_fu_507_p2;
wire   [63:0] o_idx_2_fu_513_p2;
wire   [7:0] trunc_ln59_fu_525_p1;
reg   [7:0] trunc_ln59_reg_1973;
reg   [7:0] tmp_1_reg_1979;
reg   [7:0] tmp_2_reg_1985;
reg   [7:0] tmp_3_reg_1992;
reg   [7:0] tmp_4_reg_1998;
reg   [7:0] tmp_5_reg_2004;
reg   [7:0] tmp_6_reg_2010;
reg   [7:0] tmp_7_reg_2016;
reg   [7:0] tmp_8_reg_2022;
reg   [7:0] tmp_9_reg_2028;
reg   [7:0] tmp_s_reg_2034;
reg   [7:0] tmp_10_reg_2040;
reg   [7:0] tmp_11_reg_2046;
reg   [7:0] tmp_12_reg_2052;
reg   [7:0] tmp_13_reg_2058;
reg   [7:0] tmp_14_reg_2064;
reg   [7:0] tmp_15_reg_2070;
reg   [7:0] tmp_16_reg_2076;
reg   [7:0] tmp_17_reg_2082;
reg   [7:0] tmp_18_reg_2088;
reg   [7:0] tmp_19_reg_2094;
reg   [7:0] tmp_20_reg_2100;
reg   [7:0] tmp_21_reg_2106;
reg   [7:0] tmp_22_reg_2112;
reg   [7:0] tmp_23_reg_2118;
reg   [7:0] tmp_24_reg_2124;
reg   [7:0] tmp_25_reg_2130;
reg   [7:0] tmp_26_reg_2136;
reg   [7:0] tmp_27_reg_2142;
reg   [7:0] tmp_28_reg_2148;
reg   [7:0] tmp_29_reg_2154;
reg   [7:0] tmp_30_reg_2160;
reg   [7:0] tmp_31_reg_2166;
reg   [7:0] tmp_32_reg_2172;
reg   [7:0] tmp_33_reg_2178;
reg   [7:0] tmp_34_reg_2184;
reg   [7:0] tmp_35_reg_2190;
reg   [7:0] tmp_36_reg_2196;
reg   [7:0] tmp_37_reg_2202;
reg   [7:0] tmp_38_reg_2208;
reg   [7:0] tmp_39_reg_2214;
reg   [7:0] tmp_40_reg_2220;
reg   [7:0] tmp_41_reg_2226;
reg   [7:0] tmp_42_reg_2232;
reg   [7:0] tmp_43_reg_2238;
reg   [7:0] tmp_44_reg_2244;
reg   [7:0] tmp_45_reg_2250;
reg   [7:0] tmp_46_reg_2256;
reg   [7:0] tmp_47_reg_2262;
reg   [7:0] tmp_48_reg_2268;
reg   [7:0] tmp_49_reg_2274;
reg   [7:0] tmp_50_reg_2280;
reg   [7:0] tmp_51_reg_2286;
reg   [7:0] tmp_52_reg_2292;
reg   [7:0] tmp_53_reg_2298;
reg   [7:0] tmp_54_reg_2304;
reg   [7:0] tmp_55_reg_2310;
reg   [7:0] tmp_56_reg_2316;
reg   [7:0] tmp_57_reg_2322;
reg   [7:0] tmp_58_reg_2328;
reg   [7:0] tmp_59_reg_2334;
reg   [7:0] tmp_60_reg_2340;
reg   [7:0] tmp_61_reg_2347;
reg   [7:0] tmp_62_reg_2354;
wire   [7:0] add_ln75_2_fu_1182_p2;
reg   [7:0] add_ln75_2_reg_2360;
wire   [7:0] add_ln75_4_fu_1192_p2;
reg   [7:0] add_ln75_4_reg_2365;
wire   [7:0] add_ln75_6_fu_1203_p2;
reg   [7:0] add_ln75_6_reg_2370;
wire   [7:0] add_ln75_8_fu_1213_p2;
reg   [7:0] add_ln75_8_reg_2375;
wire   [7:0] add_ln75_11_fu_1227_p2;
reg   [7:0] add_ln75_11_reg_2380;
wire   [7:0] add_ln75_13_fu_1237_p2;
reg   [7:0] add_ln75_13_reg_2385;
wire   [7:0] add_ln75_15_fu_1247_p2;
reg   [7:0] add_ln75_15_reg_2390;
wire   [7:0] add_ln75_17_fu_1257_p2;
reg   [7:0] add_ln75_17_reg_2395;
wire   [7:0] add_ln75_19_fu_1267_p2;
reg   [7:0] add_ln75_19_reg_2400;
wire   [7:0] add_ln75_21_fu_1277_p2;
reg   [7:0] add_ln75_21_reg_2405;
wire   [7:0] add_ln75_23_fu_1287_p2;
reg   [7:0] add_ln75_23_reg_2410;
wire   [7:0] add_ln75_25_fu_1297_p2;
reg   [7:0] add_ln75_25_reg_2415;
wire   [7:0] add_ln75_27_fu_1307_p2;
reg   [7:0] add_ln75_27_reg_2420;
wire   [7:0] add_ln75_29_fu_1317_p2;
reg   [7:0] add_ln75_29_reg_2425;
wire   [7:0] add_ln75_31_fu_1327_p2;
reg   [7:0] add_ln75_31_reg_2430;
wire   [7:0] add_ln75_33_fu_1337_p2;
reg   [7:0] add_ln75_33_reg_2435;
wire   [7:0] add_ln75_35_fu_1347_p2;
reg   [7:0] add_ln75_35_reg_2440;
wire   [7:0] add_ln75_37_fu_1357_p2;
reg   [7:0] add_ln75_37_reg_2445;
wire   [7:0] add_ln75_39_fu_1367_p2;
reg   [7:0] add_ln75_39_reg_2450;
wire   [7:0] add_ln75_41_fu_1377_p2;
reg   [7:0] add_ln75_41_reg_2455;
wire   [7:0] add_ln75_43_fu_1387_p2;
reg   [7:0] add_ln75_43_reg_2460;
wire   [7:0] add_ln75_45_fu_1397_p2;
reg   [7:0] add_ln75_45_reg_2465;
wire   [7:0] add_ln75_47_fu_1407_p2;
reg   [7:0] add_ln75_47_reg_2470;
wire   [7:0] add_ln75_49_fu_1417_p2;
reg   [7:0] add_ln75_49_reg_2475;
wire   [7:0] add_ln75_51_fu_1427_p2;
reg   [7:0] add_ln75_51_reg_2480;
wire   [7:0] add_ln75_53_fu_1437_p2;
reg   [7:0] add_ln75_53_reg_2485;
wire   [7:0] add_ln75_55_fu_1447_p2;
reg   [7:0] add_ln75_55_reg_2490;
wire   [7:0] add_ln75_57_fu_1457_p2;
reg   [7:0] add_ln75_57_reg_2495;
wire   [7:0] add_ln75_59_fu_1467_p2;
reg   [7:0] add_ln75_59_reg_2500;
wire   [7:0] add_ln75_61_fu_1477_p2;
reg   [7:0] add_ln75_61_reg_2505;
wire   [7:0] add_ln75_63_fu_1487_p2;
reg   [7:0] add_ln75_63_reg_2510;
wire   [7:0] add_ln75_65_fu_1497_p2;
reg   [7:0] add_ln75_65_reg_2515;
wire   [7:0] add_ln75_67_fu_1507_p2;
reg   [7:0] add_ln75_67_reg_2520;
wire   [7:0] add_ln75_69_fu_1517_p2;
reg   [7:0] add_ln75_69_reg_2525;
wire   [7:0] add_ln75_71_fu_1527_p2;
reg   [7:0] add_ln75_71_reg_2530;
wire   [7:0] add_ln75_73_fu_1537_p2;
reg   [7:0] add_ln75_73_reg_2535;
wire   [7:0] add_ln75_75_fu_1547_p2;
reg   [7:0] add_ln75_75_reg_2540;
wire   [7:0] add_ln75_77_fu_1557_p2;
reg   [7:0] add_ln75_77_reg_2545;
wire   [7:0] add_ln75_79_fu_1567_p2;
reg   [7:0] add_ln75_79_reg_2550;
wire   [7:0] add_ln75_81_fu_1577_p2;
reg   [7:0] add_ln75_81_reg_2555;
wire   [7:0] add_ln75_83_fu_1587_p2;
reg   [7:0] add_ln75_83_reg_2560;
wire   [7:0] add_ln75_85_fu_1597_p2;
reg   [7:0] add_ln75_85_reg_2565;
wire   [7:0] add_ln75_87_fu_1607_p2;
reg   [7:0] add_ln75_87_reg_2570;
wire   [7:0] add_ln75_89_fu_1617_p2;
reg   [7:0] add_ln75_89_reg_2575;
wire   [7:0] add_ln75_91_fu_1627_p2;
reg   [7:0] add_ln75_91_reg_2580;
wire   [7:0] add_ln75_93_fu_1637_p2;
reg   [7:0] add_ln75_93_reg_2585;
wire   [7:0] add_ln75_95_fu_1647_p2;
reg   [7:0] add_ln75_95_reg_2590;
wire   [7:0] add_ln75_97_fu_1657_p2;
reg   [7:0] add_ln75_97_reg_2595;
wire   [7:0] add_ln75_99_fu_1667_p2;
reg   [7:0] add_ln75_99_reg_2600;
wire   [7:0] add_ln75_101_fu_1677_p2;
reg   [7:0] add_ln75_101_reg_2605;
wire   [7:0] add_ln75_103_fu_1687_p2;
reg   [7:0] add_ln75_103_reg_2610;
wire   [7:0] add_ln75_105_fu_1697_p2;
reg   [7:0] add_ln75_105_reg_2615;
wire   [7:0] add_ln75_107_fu_1707_p2;
reg   [7:0] add_ln75_107_reg_2620;
wire   [7:0] add_ln75_109_fu_1717_p2;
reg   [7:0] add_ln75_109_reg_2625;
wire   [7:0] add_ln75_111_fu_1727_p2;
reg   [7:0] add_ln75_111_reg_2630;
wire   [7:0] add_ln75_113_fu_1737_p2;
reg   [7:0] add_ln75_113_reg_2635;
wire   [7:0] add_ln75_115_fu_1747_p2;
reg   [7:0] add_ln75_115_reg_2640;
wire   [7:0] add_ln75_117_fu_1757_p2;
reg   [7:0] add_ln75_117_reg_2645;
wire   [7:0] add_ln75_119_fu_1767_p2;
reg   [7:0] add_ln75_119_reg_2650;
wire   [7:0] add_ln75_121_fu_1777_p2;
reg   [7:0] add_ln75_121_reg_2655;
wire   [7:0] add_ln75_123_fu_1787_p2;
reg   [7:0] add_ln75_123_reg_2660;
wire   [7:0] add_ln75_125_fu_1797_p2;
reg   [7:0] add_ln75_125_reg_2665;
wire   [7:0] add_ln75_127_fu_1807_p2;
reg   [7:0] add_ln75_127_reg_2670;
wire   [7:0] add_ln75_129_fu_1832_p2;
reg   [7:0] add_ln75_129_reg_2675;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] i_idx_fu_425_p4;
wire   [57:0] o_idx_fu_439_p4;
wire   [25:0] tmp_fu_463_p4;
wire   [0:0] icmp_ln56_fu_473_p2;
wire   [6:0] trunc_ln46_fu_459_p1;
wire   [6:0] bytes_to_transfer_fu_479_p3;
wire   [31:0] zext_ln56_fu_487_p1;
wire   [7:0] add_ln75_1_fu_1177_p2;
wire   [7:0] add_ln75_fu_1171_p2;
wire   [7:0] add_ln75_3_fu_1188_p2;
wire   [7:0] add_ln75_5_fu_1198_p2;
wire   [7:0] add_ln75_7_fu_1209_p2;
wire   [7:0] add_ln75_10_fu_1223_p2;
wire   [7:0] add_ln75_9_fu_1219_p2;
wire   [7:0] add_ln75_12_fu_1233_p2;
wire   [7:0] add_ln75_14_fu_1243_p2;
wire   [7:0] add_ln75_16_fu_1253_p2;
wire   [7:0] add_ln75_18_fu_1263_p2;
wire   [7:0] add_ln75_20_fu_1273_p2;
wire   [7:0] add_ln75_22_fu_1283_p2;
wire   [7:0] add_ln75_24_fu_1293_p2;
wire   [7:0] add_ln75_26_fu_1303_p2;
wire   [7:0] add_ln75_28_fu_1313_p2;
wire   [7:0] add_ln75_30_fu_1323_p2;
wire   [7:0] add_ln75_32_fu_1333_p2;
wire   [7:0] add_ln75_34_fu_1343_p2;
wire   [7:0] add_ln75_36_fu_1353_p2;
wire   [7:0] add_ln75_38_fu_1363_p2;
wire   [7:0] add_ln75_40_fu_1373_p2;
wire   [7:0] add_ln75_42_fu_1383_p2;
wire   [7:0] add_ln75_44_fu_1393_p2;
wire   [7:0] add_ln75_46_fu_1403_p2;
wire   [7:0] add_ln75_48_fu_1413_p2;
wire   [7:0] add_ln75_50_fu_1423_p2;
wire   [7:0] add_ln75_52_fu_1433_p2;
wire   [7:0] add_ln75_54_fu_1443_p2;
wire   [7:0] add_ln75_56_fu_1453_p2;
wire   [7:0] add_ln75_58_fu_1463_p2;
wire   [7:0] add_ln75_60_fu_1473_p2;
wire   [7:0] add_ln75_62_fu_1483_p2;
wire   [7:0] add_ln75_64_fu_1493_p2;
wire   [7:0] add_ln75_66_fu_1503_p2;
wire   [7:0] add_ln75_68_fu_1513_p2;
wire   [7:0] add_ln75_70_fu_1523_p2;
wire   [7:0] add_ln75_72_fu_1533_p2;
wire   [7:0] add_ln75_74_fu_1543_p2;
wire   [7:0] add_ln75_76_fu_1553_p2;
wire   [7:0] add_ln75_78_fu_1563_p2;
wire   [7:0] add_ln75_80_fu_1573_p2;
wire   [7:0] add_ln75_82_fu_1583_p2;
wire   [7:0] add_ln75_84_fu_1593_p2;
wire   [7:0] add_ln75_86_fu_1603_p2;
wire   [7:0] add_ln75_88_fu_1613_p2;
wire   [7:0] add_ln75_90_fu_1623_p2;
wire   [7:0] add_ln75_92_fu_1633_p2;
wire   [7:0] add_ln75_94_fu_1643_p2;
wire   [7:0] add_ln75_96_fu_1653_p2;
wire   [7:0] add_ln75_98_fu_1663_p2;
wire   [7:0] add_ln75_100_fu_1673_p2;
wire   [7:0] add_ln75_102_fu_1683_p2;
wire   [7:0] add_ln75_104_fu_1693_p2;
wire   [7:0] add_ln75_106_fu_1703_p2;
wire   [7:0] add_ln75_108_fu_1713_p2;
wire   [7:0] add_ln75_110_fu_1723_p2;
wire   [7:0] add_ln75_112_fu_1733_p2;
wire   [7:0] add_ln75_114_fu_1743_p2;
wire   [7:0] add_ln75_116_fu_1753_p2;
wire   [7:0] add_ln75_118_fu_1763_p2;
wire   [7:0] add_ln75_120_fu_1773_p2;
wire   [7:0] add_ln75_122_fu_1783_p2;
wire   [7:0] add_ln75_124_fu_1793_p2;
wire   [7:0] add_ln75_126_fu_1803_p2;
wire   [7:0] add_ln75_128_fu_1828_p2;
wire    ap_CS_fsm_state18;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 shift_reg_2 = 8'd0;
#0 shift_reg_1 = 8'd0;
#0 shift_reg_0 = 8'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_idx_0_reg_399 <= i_idx_2_fu_507_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_idx_0_reg_399 <= i_idx_1_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        o_idx_0_reg_408 <= o_idx_2_fu_513_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o_idx_0_reg_408 <= o_idx_1_fu_449_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        size_0_reg_390 <= size_fu_501_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_0_reg_390 <= act_reg_Data_in_size;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_453_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln59_reg_1942 <= add_ln59_fu_491_p2;
        add_ln79_reg_1947 <= add_ln79_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1938_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln75_101_reg_2605 <= add_ln75_101_fu_1677_p2;
        add_ln75_103_reg_2610 <= add_ln75_103_fu_1687_p2;
        add_ln75_105_reg_2615 <= add_ln75_105_fu_1697_p2;
        add_ln75_107_reg_2620 <= add_ln75_107_fu_1707_p2;
        add_ln75_109_reg_2625 <= add_ln75_109_fu_1717_p2;
        add_ln75_111_reg_2630 <= add_ln75_111_fu_1727_p2;
        add_ln75_113_reg_2635 <= add_ln75_113_fu_1737_p2;
        add_ln75_115_reg_2640 <= add_ln75_115_fu_1747_p2;
        add_ln75_117_reg_2645 <= add_ln75_117_fu_1757_p2;
        add_ln75_119_reg_2650 <= add_ln75_119_fu_1767_p2;
        add_ln75_11_reg_2380 <= add_ln75_11_fu_1227_p2;
        add_ln75_121_reg_2655 <= add_ln75_121_fu_1777_p2;
        add_ln75_123_reg_2660 <= add_ln75_123_fu_1787_p2;
        add_ln75_125_reg_2665 <= add_ln75_125_fu_1797_p2;
        add_ln75_127_reg_2670 <= add_ln75_127_fu_1807_p2;
        add_ln75_129_reg_2675 <= add_ln75_129_fu_1832_p2;
        add_ln75_13_reg_2385 <= add_ln75_13_fu_1237_p2;
        add_ln75_15_reg_2390 <= add_ln75_15_fu_1247_p2;
        add_ln75_17_reg_2395 <= add_ln75_17_fu_1257_p2;
        add_ln75_19_reg_2400 <= add_ln75_19_fu_1267_p2;
        add_ln75_21_reg_2405 <= add_ln75_21_fu_1277_p2;
        add_ln75_23_reg_2410 <= add_ln75_23_fu_1287_p2;
        add_ln75_25_reg_2415 <= add_ln75_25_fu_1297_p2;
        add_ln75_27_reg_2420 <= add_ln75_27_fu_1307_p2;
        add_ln75_29_reg_2425 <= add_ln75_29_fu_1317_p2;
        add_ln75_2_reg_2360 <= add_ln75_2_fu_1182_p2;
        add_ln75_31_reg_2430 <= add_ln75_31_fu_1327_p2;
        add_ln75_33_reg_2435 <= add_ln75_33_fu_1337_p2;
        add_ln75_35_reg_2440 <= add_ln75_35_fu_1347_p2;
        add_ln75_37_reg_2445 <= add_ln75_37_fu_1357_p2;
        add_ln75_39_reg_2450 <= add_ln75_39_fu_1367_p2;
        add_ln75_41_reg_2455 <= add_ln75_41_fu_1377_p2;
        add_ln75_43_reg_2460 <= add_ln75_43_fu_1387_p2;
        add_ln75_45_reg_2465 <= add_ln75_45_fu_1397_p2;
        add_ln75_47_reg_2470 <= add_ln75_47_fu_1407_p2;
        add_ln75_49_reg_2475 <= add_ln75_49_fu_1417_p2;
        add_ln75_4_reg_2365 <= add_ln75_4_fu_1192_p2;
        add_ln75_51_reg_2480 <= add_ln75_51_fu_1427_p2;
        add_ln75_53_reg_2485 <= add_ln75_53_fu_1437_p2;
        add_ln75_55_reg_2490 <= add_ln75_55_fu_1447_p2;
        add_ln75_57_reg_2495 <= add_ln75_57_fu_1457_p2;
        add_ln75_59_reg_2500 <= add_ln75_59_fu_1467_p2;
        add_ln75_61_reg_2505 <= add_ln75_61_fu_1477_p2;
        add_ln75_63_reg_2510 <= add_ln75_63_fu_1487_p2;
        add_ln75_65_reg_2515 <= add_ln75_65_fu_1497_p2;
        add_ln75_67_reg_2520 <= add_ln75_67_fu_1507_p2;
        add_ln75_69_reg_2525 <= add_ln75_69_fu_1517_p2;
        add_ln75_6_reg_2370 <= add_ln75_6_fu_1203_p2;
        add_ln75_71_reg_2530 <= add_ln75_71_fu_1527_p2;
        add_ln75_73_reg_2535 <= add_ln75_73_fu_1537_p2;
        add_ln75_75_reg_2540 <= add_ln75_75_fu_1547_p2;
        add_ln75_77_reg_2545 <= add_ln75_77_fu_1557_p2;
        add_ln75_79_reg_2550 <= add_ln75_79_fu_1567_p2;
        add_ln75_81_reg_2555 <= add_ln75_81_fu_1577_p2;
        add_ln75_83_reg_2560 <= add_ln75_83_fu_1587_p2;
        add_ln75_85_reg_2565 <= add_ln75_85_fu_1597_p2;
        add_ln75_87_reg_2570 <= add_ln75_87_fu_1607_p2;
        add_ln75_89_reg_2575 <= add_ln75_89_fu_1617_p2;
        add_ln75_8_reg_2375 <= add_ln75_8_fu_1213_p2;
        add_ln75_91_reg_2580 <= add_ln75_91_fu_1627_p2;
        add_ln75_93_reg_2585 <= add_ln75_93_fu_1637_p2;
        add_ln75_95_reg_2590 <= add_ln75_95_fu_1647_p2;
        add_ln75_97_reg_2595 <= add_ln75_97_fu_1657_p2;
        add_ln75_99_reg_2600 <= add_ln75_99_fu_1667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln79_reg_1947_pp0_iter1_reg <= add_ln79_reg_1947;
        icmp_ln46_reg_1938 <= icmp_ln46_fu_453_p2;
        icmp_ln46_reg_1938_pp0_iter1_reg <= icmp_ln46_reg_1938;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln79_reg_1947_pp0_iter2_reg <= add_ln79_reg_1947_pp0_iter1_reg;
        add_ln79_reg_1947_pp0_iter3_reg <= add_ln79_reg_1947_pp0_iter2_reg;
        add_ln79_reg_1947_pp0_iter4_reg <= add_ln79_reg_1947_pp0_iter3_reg;
        add_ln79_reg_1947_pp0_iter5_reg <= add_ln79_reg_1947_pp0_iter4_reg;
        add_ln79_reg_1947_pp0_iter6_reg <= add_ln79_reg_1947_pp0_iter5_reg;
        add_ln79_reg_1947_pp0_iter7_reg <= add_ln79_reg_1947_pp0_iter6_reg;
        add_ln79_reg_1947_pp0_iter8_reg <= add_ln79_reg_1947_pp0_iter7_reg;
        icmp_ln46_reg_1938_pp0_iter10_reg <= icmp_ln46_reg_1938_pp0_iter9_reg;
        icmp_ln46_reg_1938_pp0_iter11_reg <= icmp_ln46_reg_1938_pp0_iter10_reg;
        icmp_ln46_reg_1938_pp0_iter12_reg <= icmp_ln46_reg_1938_pp0_iter11_reg;
        icmp_ln46_reg_1938_pp0_iter13_reg <= icmp_ln46_reg_1938_pp0_iter12_reg;
        icmp_ln46_reg_1938_pp0_iter14_reg <= icmp_ln46_reg_1938_pp0_iter13_reg;
        icmp_ln46_reg_1938_pp0_iter2_reg <= icmp_ln46_reg_1938_pp0_iter1_reg;
        icmp_ln46_reg_1938_pp0_iter3_reg <= icmp_ln46_reg_1938_pp0_iter2_reg;
        icmp_ln46_reg_1938_pp0_iter4_reg <= icmp_ln46_reg_1938_pp0_iter3_reg;
        icmp_ln46_reg_1938_pp0_iter5_reg <= icmp_ln46_reg_1938_pp0_iter4_reg;
        icmp_ln46_reg_1938_pp0_iter6_reg <= icmp_ln46_reg_1938_pp0_iter5_reg;
        icmp_ln46_reg_1938_pp0_iter7_reg <= icmp_ln46_reg_1938_pp0_iter6_reg;
        icmp_ln46_reg_1938_pp0_iter8_reg <= icmp_ln46_reg_1938_pp0_iter7_reg;
        icmp_ln46_reg_1938_pp0_iter9_reg <= icmp_ln46_reg_1938_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        din_gmem_V_offset_ca_reg_1923[57 : 0] <= din_gmem_V_offset_ca_fu_421_p1[57 : 0];
        dout_gmem_V_offset_c_reg_1918[57 : 0] <= dout_gmem_V_offset_c_fu_417_p1[57 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1938_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shift_reg_0 <= tmp_62_reg_2354;
        shift_reg_1 <= tmp_61_reg_2347;
        shift_reg_2 <= tmp_60_reg_2340;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_2040 <= {{m_axi_din_gmem_V_RDATA[95:88]}};
        tmp_11_reg_2046 <= {{m_axi_din_gmem_V_RDATA[103:96]}};
        tmp_12_reg_2052 <= {{m_axi_din_gmem_V_RDATA[111:104]}};
        tmp_13_reg_2058 <= {{m_axi_din_gmem_V_RDATA[119:112]}};
        tmp_14_reg_2064 <= {{m_axi_din_gmem_V_RDATA[127:120]}};
        tmp_15_reg_2070 <= {{m_axi_din_gmem_V_RDATA[135:128]}};
        tmp_16_reg_2076 <= {{m_axi_din_gmem_V_RDATA[143:136]}};
        tmp_17_reg_2082 <= {{m_axi_din_gmem_V_RDATA[151:144]}};
        tmp_18_reg_2088 <= {{m_axi_din_gmem_V_RDATA[159:152]}};
        tmp_19_reg_2094 <= {{m_axi_din_gmem_V_RDATA[167:160]}};
        tmp_1_reg_1979 <= {{m_axi_din_gmem_V_RDATA[15:8]}};
        tmp_20_reg_2100 <= {{m_axi_din_gmem_V_RDATA[175:168]}};
        tmp_21_reg_2106 <= {{m_axi_din_gmem_V_RDATA[183:176]}};
        tmp_22_reg_2112 <= {{m_axi_din_gmem_V_RDATA[191:184]}};
        tmp_23_reg_2118 <= {{m_axi_din_gmem_V_RDATA[199:192]}};
        tmp_24_reg_2124 <= {{m_axi_din_gmem_V_RDATA[207:200]}};
        tmp_25_reg_2130 <= {{m_axi_din_gmem_V_RDATA[215:208]}};
        tmp_26_reg_2136 <= {{m_axi_din_gmem_V_RDATA[223:216]}};
        tmp_27_reg_2142 <= {{m_axi_din_gmem_V_RDATA[231:224]}};
        tmp_28_reg_2148 <= {{m_axi_din_gmem_V_RDATA[239:232]}};
        tmp_29_reg_2154 <= {{m_axi_din_gmem_V_RDATA[247:240]}};
        tmp_2_reg_1985 <= {{m_axi_din_gmem_V_RDATA[23:16]}};
        tmp_30_reg_2160 <= {{m_axi_din_gmem_V_RDATA[255:248]}};
        tmp_31_reg_2166 <= {{m_axi_din_gmem_V_RDATA[263:256]}};
        tmp_32_reg_2172 <= {{m_axi_din_gmem_V_RDATA[271:264]}};
        tmp_33_reg_2178 <= {{m_axi_din_gmem_V_RDATA[279:272]}};
        tmp_34_reg_2184 <= {{m_axi_din_gmem_V_RDATA[287:280]}};
        tmp_35_reg_2190 <= {{m_axi_din_gmem_V_RDATA[295:288]}};
        tmp_36_reg_2196 <= {{m_axi_din_gmem_V_RDATA[303:296]}};
        tmp_37_reg_2202 <= {{m_axi_din_gmem_V_RDATA[311:304]}};
        tmp_38_reg_2208 <= {{m_axi_din_gmem_V_RDATA[319:312]}};
        tmp_39_reg_2214 <= {{m_axi_din_gmem_V_RDATA[327:320]}};
        tmp_3_reg_1992 <= {{m_axi_din_gmem_V_RDATA[31:24]}};
        tmp_40_reg_2220 <= {{m_axi_din_gmem_V_RDATA[335:328]}};
        tmp_41_reg_2226 <= {{m_axi_din_gmem_V_RDATA[343:336]}};
        tmp_42_reg_2232 <= {{m_axi_din_gmem_V_RDATA[351:344]}};
        tmp_43_reg_2238 <= {{m_axi_din_gmem_V_RDATA[359:352]}};
        tmp_44_reg_2244 <= {{m_axi_din_gmem_V_RDATA[367:360]}};
        tmp_45_reg_2250 <= {{m_axi_din_gmem_V_RDATA[375:368]}};
        tmp_46_reg_2256 <= {{m_axi_din_gmem_V_RDATA[383:376]}};
        tmp_47_reg_2262 <= {{m_axi_din_gmem_V_RDATA[391:384]}};
        tmp_48_reg_2268 <= {{m_axi_din_gmem_V_RDATA[399:392]}};
        tmp_49_reg_2274 <= {{m_axi_din_gmem_V_RDATA[407:400]}};
        tmp_4_reg_1998 <= {{m_axi_din_gmem_V_RDATA[39:32]}};
        tmp_50_reg_2280 <= {{m_axi_din_gmem_V_RDATA[415:408]}};
        tmp_51_reg_2286 <= {{m_axi_din_gmem_V_RDATA[423:416]}};
        tmp_52_reg_2292 <= {{m_axi_din_gmem_V_RDATA[431:424]}};
        tmp_53_reg_2298 <= {{m_axi_din_gmem_V_RDATA[439:432]}};
        tmp_54_reg_2304 <= {{m_axi_din_gmem_V_RDATA[447:440]}};
        tmp_55_reg_2310 <= {{m_axi_din_gmem_V_RDATA[455:448]}};
        tmp_56_reg_2316 <= {{m_axi_din_gmem_V_RDATA[463:456]}};
        tmp_57_reg_2322 <= {{m_axi_din_gmem_V_RDATA[471:464]}};
        tmp_58_reg_2328 <= {{m_axi_din_gmem_V_RDATA[479:472]}};
        tmp_59_reg_2334 <= {{m_axi_din_gmem_V_RDATA[487:480]}};
        tmp_5_reg_2004 <= {{m_axi_din_gmem_V_RDATA[47:40]}};
        tmp_60_reg_2340 <= {{m_axi_din_gmem_V_RDATA[495:488]}};
        tmp_61_reg_2347 <= {{m_axi_din_gmem_V_RDATA[503:496]}};
        tmp_62_reg_2354 <= {{m_axi_din_gmem_V_RDATA[511:504]}};
        tmp_6_reg_2010 <= {{m_axi_din_gmem_V_RDATA[55:48]}};
        tmp_7_reg_2016 <= {{m_axi_din_gmem_V_RDATA[63:56]}};
        tmp_8_reg_2022 <= {{m_axi_din_gmem_V_RDATA[71:64]}};
        tmp_9_reg_2028 <= {{m_axi_din_gmem_V_RDATA[79:72]}};
        tmp_s_reg_2034 <= {{m_axi_din_gmem_V_RDATA[87:80]}};
        trunc_ln59_reg_1973 <= trunc_ln59_fu_525_p1;
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_453_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        din_gmem_V_blk_n_AR = m_axi_din_gmem_V_ARREADY;
    end else begin
        din_gmem_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        din_gmem_V_blk_n_AW = m_axi_din_gmem_V_AWREADY;
    end else begin
        din_gmem_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        din_gmem_V_blk_n_B = m_axi_din_gmem_V_BVALID;
    end else begin
        din_gmem_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        din_gmem_V_blk_n_R = m_axi_din_gmem_V_RVALID;
    end else begin
        din_gmem_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        din_gmem_V_blk_n_W = m_axi_din_gmem_V_WREADY;
    end else begin
        din_gmem_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_din_gmem_V_ARVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_din_gmem_V_AWVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_din_gmem_V_BREADY = 1'b1;
    end else begin
        m_axi_din_gmem_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_din_gmem_V_RREADY = 1'b1;
    end else begin
        m_axi_din_gmem_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1938_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_din_gmem_V_WVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_453_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln46_fu_453_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter14 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_fu_491_p2 = (din_gmem_V_offset_ca_reg_1923 + i_idx_0_reg_399);

assign add_ln75_100_fu_1673_p2 = (tmp_48_reg_2268 + tmp_47_reg_2262);

assign add_ln75_101_fu_1677_p2 = (add_ln75_96_fu_1653_p2 + add_ln75_100_fu_1673_p2);

assign add_ln75_102_fu_1683_p2 = (tmp_49_reg_2274 + tmp_48_reg_2268);

assign add_ln75_103_fu_1687_p2 = (add_ln75_98_fu_1663_p2 + add_ln75_102_fu_1683_p2);

assign add_ln75_104_fu_1693_p2 = (tmp_50_reg_2280 + tmp_49_reg_2274);

assign add_ln75_105_fu_1697_p2 = (add_ln75_100_fu_1673_p2 + add_ln75_104_fu_1693_p2);

assign add_ln75_106_fu_1703_p2 = (tmp_51_reg_2286 + tmp_50_reg_2280);

assign add_ln75_107_fu_1707_p2 = (add_ln75_102_fu_1683_p2 + add_ln75_106_fu_1703_p2);

assign add_ln75_108_fu_1713_p2 = (tmp_52_reg_2292 + tmp_51_reg_2286);

assign add_ln75_109_fu_1717_p2 = (add_ln75_104_fu_1693_p2 + add_ln75_108_fu_1713_p2);

assign add_ln75_10_fu_1223_p2 = (tmp_2_reg_1985 + tmp_1_reg_1979);

assign add_ln75_110_fu_1723_p2 = (tmp_53_reg_2298 + tmp_52_reg_2292);

assign add_ln75_111_fu_1727_p2 = (add_ln75_106_fu_1703_p2 + add_ln75_110_fu_1723_p2);

assign add_ln75_112_fu_1733_p2 = (tmp_54_reg_2304 + tmp_53_reg_2298);

assign add_ln75_113_fu_1737_p2 = (add_ln75_108_fu_1713_p2 + add_ln75_112_fu_1733_p2);

assign add_ln75_114_fu_1743_p2 = (tmp_55_reg_2310 + tmp_54_reg_2304);

assign add_ln75_115_fu_1747_p2 = (add_ln75_110_fu_1723_p2 + add_ln75_114_fu_1743_p2);

assign add_ln75_116_fu_1753_p2 = (tmp_56_reg_2316 + tmp_55_reg_2310);

assign add_ln75_117_fu_1757_p2 = (add_ln75_112_fu_1733_p2 + add_ln75_116_fu_1753_p2);

assign add_ln75_118_fu_1763_p2 = (tmp_57_reg_2322 + tmp_56_reg_2316);

assign add_ln75_119_fu_1767_p2 = (add_ln75_114_fu_1743_p2 + add_ln75_118_fu_1763_p2);

assign add_ln75_11_fu_1227_p2 = (add_ln75_10_fu_1223_p2 + add_ln75_9_fu_1219_p2);

assign add_ln75_120_fu_1773_p2 = (tmp_58_reg_2328 + tmp_57_reg_2322);

assign add_ln75_121_fu_1777_p2 = (add_ln75_116_fu_1753_p2 + add_ln75_120_fu_1773_p2);

assign add_ln75_122_fu_1783_p2 = (tmp_59_reg_2334 + tmp_58_reg_2328);

assign add_ln75_123_fu_1787_p2 = (add_ln75_118_fu_1763_p2 + add_ln75_122_fu_1783_p2);

assign add_ln75_124_fu_1793_p2 = (tmp_60_reg_2340 + tmp_59_reg_2334);

assign add_ln75_125_fu_1797_p2 = (add_ln75_120_fu_1773_p2 + add_ln75_124_fu_1793_p2);

assign add_ln75_126_fu_1803_p2 = (tmp_61_reg_2347 + tmp_60_reg_2340);

assign add_ln75_127_fu_1807_p2 = (add_ln75_122_fu_1783_p2 + add_ln75_126_fu_1803_p2);

assign add_ln75_128_fu_1828_p2 = (tmp_62_reg_2354 + tmp_61_reg_2347);

assign add_ln75_129_fu_1832_p2 = (add_ln75_124_fu_1793_p2 + add_ln75_128_fu_1828_p2);

assign add_ln75_12_fu_1233_p2 = (tmp_5_reg_2004 + tmp_4_reg_1998);

assign add_ln75_13_fu_1237_p2 = (add_ln75_7_fu_1209_p2 + add_ln75_12_fu_1233_p2);

assign add_ln75_14_fu_1243_p2 = (tmp_6_reg_2010 + tmp_5_reg_2004);

assign add_ln75_15_fu_1247_p2 = (add_ln75_9_fu_1219_p2 + add_ln75_14_fu_1243_p2);

assign add_ln75_16_fu_1253_p2 = (tmp_7_reg_2016 + tmp_6_reg_2010);

assign add_ln75_17_fu_1257_p2 = (add_ln75_12_fu_1233_p2 + add_ln75_16_fu_1253_p2);

assign add_ln75_18_fu_1263_p2 = (tmp_8_reg_2022 + tmp_7_reg_2016);

assign add_ln75_19_fu_1267_p2 = (add_ln75_14_fu_1243_p2 + add_ln75_18_fu_1263_p2);

assign add_ln75_1_fu_1177_p2 = (shift_reg_2 + trunc_ln59_reg_1973);

assign add_ln75_20_fu_1273_p2 = (tmp_9_reg_2028 + tmp_8_reg_2022);

assign add_ln75_21_fu_1277_p2 = (add_ln75_16_fu_1253_p2 + add_ln75_20_fu_1273_p2);

assign add_ln75_22_fu_1283_p2 = (tmp_s_reg_2034 + tmp_9_reg_2028);

assign add_ln75_23_fu_1287_p2 = (add_ln75_18_fu_1263_p2 + add_ln75_22_fu_1283_p2);

assign add_ln75_24_fu_1293_p2 = (tmp_10_reg_2040 + tmp_s_reg_2034);

assign add_ln75_25_fu_1297_p2 = (add_ln75_20_fu_1273_p2 + add_ln75_24_fu_1293_p2);

assign add_ln75_26_fu_1303_p2 = (tmp_11_reg_2046 + tmp_10_reg_2040);

assign add_ln75_27_fu_1307_p2 = (add_ln75_22_fu_1283_p2 + add_ln75_26_fu_1303_p2);

assign add_ln75_28_fu_1313_p2 = (tmp_12_reg_2052 + tmp_11_reg_2046);

assign add_ln75_29_fu_1317_p2 = (add_ln75_24_fu_1293_p2 + add_ln75_28_fu_1313_p2);

assign add_ln75_2_fu_1182_p2 = (add_ln75_1_fu_1177_p2 + add_ln75_fu_1171_p2);

assign add_ln75_30_fu_1323_p2 = (tmp_13_reg_2058 + tmp_12_reg_2052);

assign add_ln75_31_fu_1327_p2 = (add_ln75_26_fu_1303_p2 + add_ln75_30_fu_1323_p2);

assign add_ln75_32_fu_1333_p2 = (tmp_14_reg_2064 + tmp_13_reg_2058);

assign add_ln75_33_fu_1337_p2 = (add_ln75_28_fu_1313_p2 + add_ln75_32_fu_1333_p2);

assign add_ln75_34_fu_1343_p2 = (tmp_15_reg_2070 + tmp_14_reg_2064);

assign add_ln75_35_fu_1347_p2 = (add_ln75_30_fu_1323_p2 + add_ln75_34_fu_1343_p2);

assign add_ln75_36_fu_1353_p2 = (tmp_16_reg_2076 + tmp_15_reg_2070);

assign add_ln75_37_fu_1357_p2 = (add_ln75_32_fu_1333_p2 + add_ln75_36_fu_1353_p2);

assign add_ln75_38_fu_1363_p2 = (tmp_17_reg_2082 + tmp_16_reg_2076);

assign add_ln75_39_fu_1367_p2 = (add_ln75_34_fu_1343_p2 + add_ln75_38_fu_1363_p2);

assign add_ln75_3_fu_1188_p2 = (tmp_1_reg_1979 + trunc_ln59_reg_1973);

assign add_ln75_40_fu_1373_p2 = (tmp_18_reg_2088 + tmp_17_reg_2082);

assign add_ln75_41_fu_1377_p2 = (add_ln75_36_fu_1353_p2 + add_ln75_40_fu_1373_p2);

assign add_ln75_42_fu_1383_p2 = (tmp_19_reg_2094 + tmp_18_reg_2088);

assign add_ln75_43_fu_1387_p2 = (add_ln75_38_fu_1363_p2 + add_ln75_42_fu_1383_p2);

assign add_ln75_44_fu_1393_p2 = (tmp_20_reg_2100 + tmp_19_reg_2094);

assign add_ln75_45_fu_1397_p2 = (add_ln75_40_fu_1373_p2 + add_ln75_44_fu_1393_p2);

assign add_ln75_46_fu_1403_p2 = (tmp_21_reg_2106 + tmp_20_reg_2100);

assign add_ln75_47_fu_1407_p2 = (add_ln75_42_fu_1383_p2 + add_ln75_46_fu_1403_p2);

assign add_ln75_48_fu_1413_p2 = (tmp_22_reg_2112 + tmp_21_reg_2106);

assign add_ln75_49_fu_1417_p2 = (add_ln75_44_fu_1393_p2 + add_ln75_48_fu_1413_p2);

assign add_ln75_4_fu_1192_p2 = (add_ln75_3_fu_1188_p2 + add_ln75_fu_1171_p2);

assign add_ln75_50_fu_1423_p2 = (tmp_23_reg_2118 + tmp_22_reg_2112);

assign add_ln75_51_fu_1427_p2 = (add_ln75_46_fu_1403_p2 + add_ln75_50_fu_1423_p2);

assign add_ln75_52_fu_1433_p2 = (tmp_24_reg_2124 + tmp_23_reg_2118);

assign add_ln75_53_fu_1437_p2 = (add_ln75_48_fu_1413_p2 + add_ln75_52_fu_1433_p2);

assign add_ln75_54_fu_1443_p2 = (tmp_25_reg_2130 + tmp_24_reg_2124);

assign add_ln75_55_fu_1447_p2 = (add_ln75_50_fu_1423_p2 + add_ln75_54_fu_1443_p2);

assign add_ln75_56_fu_1453_p2 = (tmp_26_reg_2136 + tmp_25_reg_2130);

assign add_ln75_57_fu_1457_p2 = (add_ln75_52_fu_1433_p2 + add_ln75_56_fu_1453_p2);

assign add_ln75_58_fu_1463_p2 = (tmp_27_reg_2142 + tmp_26_reg_2136);

assign add_ln75_59_fu_1467_p2 = (add_ln75_54_fu_1443_p2 + add_ln75_58_fu_1463_p2);

assign add_ln75_5_fu_1198_p2 = (shift_reg_0 + tmp_2_reg_1985);

assign add_ln75_60_fu_1473_p2 = (tmp_28_reg_2148 + tmp_27_reg_2142);

assign add_ln75_61_fu_1477_p2 = (add_ln75_56_fu_1453_p2 + add_ln75_60_fu_1473_p2);

assign add_ln75_62_fu_1483_p2 = (tmp_29_reg_2154 + tmp_28_reg_2148);

assign add_ln75_63_fu_1487_p2 = (add_ln75_58_fu_1463_p2 + add_ln75_62_fu_1483_p2);

assign add_ln75_64_fu_1493_p2 = (tmp_30_reg_2160 + tmp_29_reg_2154);

assign add_ln75_65_fu_1497_p2 = (add_ln75_60_fu_1473_p2 + add_ln75_64_fu_1493_p2);

assign add_ln75_66_fu_1503_p2 = (tmp_31_reg_2166 + tmp_30_reg_2160);

assign add_ln75_67_fu_1507_p2 = (add_ln75_62_fu_1483_p2 + add_ln75_66_fu_1503_p2);

assign add_ln75_68_fu_1513_p2 = (tmp_32_reg_2172 + tmp_31_reg_2166);

assign add_ln75_69_fu_1517_p2 = (add_ln75_64_fu_1493_p2 + add_ln75_68_fu_1513_p2);

assign add_ln75_6_fu_1203_p2 = (add_ln75_3_fu_1188_p2 + add_ln75_5_fu_1198_p2);

assign add_ln75_70_fu_1523_p2 = (tmp_33_reg_2178 + tmp_32_reg_2172);

assign add_ln75_71_fu_1527_p2 = (add_ln75_66_fu_1503_p2 + add_ln75_70_fu_1523_p2);

assign add_ln75_72_fu_1533_p2 = (tmp_34_reg_2184 + tmp_33_reg_2178);

assign add_ln75_73_fu_1537_p2 = (add_ln75_68_fu_1513_p2 + add_ln75_72_fu_1533_p2);

assign add_ln75_74_fu_1543_p2 = (tmp_35_reg_2190 + tmp_34_reg_2184);

assign add_ln75_75_fu_1547_p2 = (add_ln75_70_fu_1523_p2 + add_ln75_74_fu_1543_p2);

assign add_ln75_76_fu_1553_p2 = (tmp_36_reg_2196 + tmp_35_reg_2190);

assign add_ln75_77_fu_1557_p2 = (add_ln75_72_fu_1533_p2 + add_ln75_76_fu_1553_p2);

assign add_ln75_78_fu_1563_p2 = (tmp_37_reg_2202 + tmp_36_reg_2196);

assign add_ln75_79_fu_1567_p2 = (add_ln75_74_fu_1543_p2 + add_ln75_78_fu_1563_p2);

assign add_ln75_7_fu_1209_p2 = (tmp_3_reg_1992 + tmp_2_reg_1985);

assign add_ln75_80_fu_1573_p2 = (tmp_38_reg_2208 + tmp_37_reg_2202);

assign add_ln75_81_fu_1577_p2 = (add_ln75_76_fu_1553_p2 + add_ln75_80_fu_1573_p2);

assign add_ln75_82_fu_1583_p2 = (tmp_39_reg_2214 + tmp_38_reg_2208);

assign add_ln75_83_fu_1587_p2 = (add_ln75_78_fu_1563_p2 + add_ln75_82_fu_1583_p2);

assign add_ln75_84_fu_1593_p2 = (tmp_40_reg_2220 + tmp_39_reg_2214);

assign add_ln75_85_fu_1597_p2 = (add_ln75_80_fu_1573_p2 + add_ln75_84_fu_1593_p2);

assign add_ln75_86_fu_1603_p2 = (tmp_41_reg_2226 + tmp_40_reg_2220);

assign add_ln75_87_fu_1607_p2 = (add_ln75_82_fu_1583_p2 + add_ln75_86_fu_1603_p2);

assign add_ln75_88_fu_1613_p2 = (tmp_42_reg_2232 + tmp_41_reg_2226);

assign add_ln75_89_fu_1617_p2 = (add_ln75_84_fu_1593_p2 + add_ln75_88_fu_1613_p2);

assign add_ln75_8_fu_1213_p2 = (add_ln75_3_fu_1188_p2 + add_ln75_7_fu_1209_p2);

assign add_ln75_90_fu_1623_p2 = (tmp_43_reg_2238 + tmp_42_reg_2232);

assign add_ln75_91_fu_1627_p2 = (add_ln75_86_fu_1603_p2 + add_ln75_90_fu_1623_p2);

assign add_ln75_92_fu_1633_p2 = (tmp_44_reg_2244 + tmp_43_reg_2238);

assign add_ln75_93_fu_1637_p2 = (add_ln75_88_fu_1613_p2 + add_ln75_92_fu_1633_p2);

assign add_ln75_94_fu_1643_p2 = (tmp_45_reg_2250 + tmp_44_reg_2244);

assign add_ln75_95_fu_1647_p2 = (add_ln75_90_fu_1623_p2 + add_ln75_94_fu_1643_p2);

assign add_ln75_96_fu_1653_p2 = (tmp_46_reg_2256 + tmp_45_reg_2250);

assign add_ln75_97_fu_1657_p2 = (add_ln75_92_fu_1633_p2 + add_ln75_96_fu_1653_p2);

assign add_ln75_98_fu_1663_p2 = (tmp_47_reg_2262 + tmp_46_reg_2256);

assign add_ln75_99_fu_1667_p2 = (add_ln75_94_fu_1643_p2 + add_ln75_98_fu_1663_p2);

assign add_ln75_9_fu_1219_p2 = (tmp_4_reg_1998 + tmp_3_reg_1992);

assign add_ln75_fu_1171_p2 = (shift_reg_0 + shift_reg_1);

assign add_ln79_fu_496_p2 = (dout_gmem_V_offset_c_reg_1918 + o_idx_0_reg_408);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (m_axi_din_gmem_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (m_axi_din_gmem_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (m_axi_din_gmem_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state12_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state11_io)) | ((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (m_axi_din_gmem_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (m_axi_din_gmem_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state12_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state11_io)) | ((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (m_axi_din_gmem_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((icmp_ln46_reg_1938_pp0_iter7_reg == 1'd0) & (m_axi_din_gmem_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln46_reg_1938_pp0_iter8_reg == 1'd0) & (m_axi_din_gmem_V_AWREADY == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((icmp_ln46_reg_1938_pp0_iter9_reg == 1'd0) & (m_axi_din_gmem_V_WREADY == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter15 = ((icmp_ln46_reg_1938_pp0_iter14_reg == 1'd0) & (m_axi_din_gmem_V_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln46_reg_1938 == 1'd0) & (m_axi_din_gmem_V_ARREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bytes_to_transfer_fu_479_p3 = ((icmp_ln56_fu_473_p2[0:0] === 1'b1) ? trunc_ln46_fu_459_p1 : 7'd64);

assign din_gmem_V_offset_ca_fu_421_p1 = din_gmem_V_offset;

assign dout_gmem_V_offset_c_fu_417_p1 = dout_gmem_V_offset;

assign i_idx_1_fu_435_p1 = i_idx_fu_425_p4;

assign i_idx_2_fu_507_p2 = (64'd1 + i_idx_0_reg_399);

assign i_idx_fu_425_p4 = {{act_reg_Data_in_addr[63:6]}};

assign icmp_ln46_fu_453_p2 = ((size_0_reg_390 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_473_p2 = ((tmp_fu_463_p4 == 26'd0) ? 1'b1 : 1'b0);

assign m_axi_din_gmem_V_ARADDR = add_ln59_reg_1942;

assign m_axi_din_gmem_V_ARBURST = 2'd0;

assign m_axi_din_gmem_V_ARCACHE = 4'd0;

assign m_axi_din_gmem_V_ARID = 1'd0;

assign m_axi_din_gmem_V_ARLEN = 32'd1;

assign m_axi_din_gmem_V_ARLOCK = 2'd0;

assign m_axi_din_gmem_V_ARPROT = 3'd0;

assign m_axi_din_gmem_V_ARQOS = 4'd0;

assign m_axi_din_gmem_V_ARREGION = 4'd0;

assign m_axi_din_gmem_V_ARSIZE = 3'd0;

assign m_axi_din_gmem_V_ARUSER = 1'd0;

assign m_axi_din_gmem_V_AWADDR = add_ln79_reg_1947_pp0_iter8_reg;

assign m_axi_din_gmem_V_AWBURST = 2'd0;

assign m_axi_din_gmem_V_AWCACHE = 4'd0;

assign m_axi_din_gmem_V_AWID = 1'd0;

assign m_axi_din_gmem_V_AWLEN = 32'd1;

assign m_axi_din_gmem_V_AWLOCK = 2'd0;

assign m_axi_din_gmem_V_AWPROT = 3'd0;

assign m_axi_din_gmem_V_AWQOS = 4'd0;

assign m_axi_din_gmem_V_AWREGION = 4'd0;

assign m_axi_din_gmem_V_AWSIZE = 3'd0;

assign m_axi_din_gmem_V_AWUSER = 1'd0;

assign m_axi_din_gmem_V_WDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{add_ln75_129_reg_2675}, {add_ln75_127_reg_2670}}, {add_ln75_125_reg_2665}}, {add_ln75_123_reg_2660}}, {add_ln75_121_reg_2655}}, {add_ln75_119_reg_2650}}, {add_ln75_117_reg_2645}}, {add_ln75_115_reg_2640}}, {add_ln75_113_reg_2635}}, {add_ln75_111_reg_2630}}, {add_ln75_109_reg_2625}}, {add_ln75_107_reg_2620}}, {add_ln75_105_reg_2615}}, {add_ln75_103_reg_2610}}, {add_ln75_101_reg_2605}}, {add_ln75_99_reg_2600}}, {add_ln75_97_reg_2595}}, {add_ln75_95_reg_2590}}, {add_ln75_93_reg_2585}}, {add_ln75_91_reg_2580}}, {add_ln75_89_reg_2575}}, {add_ln75_87_reg_2570}}, {add_ln75_85_reg_2565}}, {add_ln75_83_reg_2560}}, {add_ln75_81_reg_2555}}, {add_ln75_79_reg_2550}}, {add_ln75_77_reg_2545}}, {add_ln75_75_reg_2540}}, {add_ln75_73_reg_2535}}, {add_ln75_71_reg_2530}}, {add_ln75_69_reg_2525}}, {add_ln75_67_reg_2520}}, {add_ln75_65_reg_2515}}, {add_ln75_63_reg_2510}}, {add_ln75_61_reg_2505}}, {add_ln75_59_reg_2500}}, {add_ln75_57_reg_2495}}, {add_ln75_55_reg_2490}}, {add_ln75_53_reg_2485}}, {add_ln75_51_reg_2480}}, {add_ln75_49_reg_2475}}, {add_ln75_47_reg_2470}}, {add_ln75_45_reg_2465}}, {add_ln75_43_reg_2460}}, {add_ln75_41_reg_2455}}, {add_ln75_39_reg_2450}}, {add_ln75_37_reg_2445}}, {add_ln75_35_reg_2440}}, {add_ln75_33_reg_2435}}, {add_ln75_31_reg_2430}}, {add_ln75_29_reg_2425}}, {add_ln75_27_reg_2420}}, {add_ln75_25_reg_2415}}, {add_ln75_23_reg_2410}}, {add_ln75_21_reg_2405}}, {add_ln75_19_reg_2400}}, {add_ln75_17_reg_2395}}, {add_ln75_15_reg_2390}}, {add_ln75_13_reg_2385}}, {add_ln75_11_reg_2380}}, {add_ln75_8_reg_2375}}, {add_ln75_6_reg_2370}}, {add_ln75_4_reg_2365}}, {add_ln75_2_reg_2360}};

assign m_axi_din_gmem_V_WID = 1'd0;

assign m_axi_din_gmem_V_WLAST = 1'b0;

assign m_axi_din_gmem_V_WSTRB = 64'd18446744073709551615;

assign m_axi_din_gmem_V_WUSER = 1'd0;

assign o_idx_1_fu_449_p1 = o_idx_fu_439_p4;

assign o_idx_2_fu_513_p2 = (64'd1 + o_idx_0_reg_408);

assign o_idx_fu_439_p4 = {{act_reg_Data_out_add[63:6]}};

assign size_fu_501_p2 = (size_0_reg_390 - zext_ln56_fu_487_p1);

assign tmp_fu_463_p4 = {{size_0_reg_390[31:6]}};

assign trunc_ln46_fu_459_p1 = size_0_reg_390[6:0];

assign trunc_ln59_fu_525_p1 = m_axi_din_gmem_V_RDATA[7:0];

assign zext_ln56_fu_487_p1 = bytes_to_transfer_fu_479_p3;

always @ (posedge ap_clk) begin
    dout_gmem_V_offset_c_reg_1918[63:58] <= 6'b000000;
    din_gmem_V_offset_ca_reg_1923[63:58] <= 6'b000000;
end

endmodule //process_action
