-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_action is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_din_gmem_V_AWVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_AWREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_WREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_WLAST : OUT STD_LOGIC;
    m_axi_din_gmem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_ARREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_RREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_RLAST : IN STD_LOGIC;
    m_axi_din_gmem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_BREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    din_gmem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    dout_gmem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    act_reg_Data_in_addr : IN STD_LOGIC_VECTOR (63 downto 0);
    act_reg_Data_in_size : IN STD_LOGIC_VECTOR (31 downto 0);
    act_reg_Data_out_add : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of process_action is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_107 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000111";
    constant ap_const_lv32_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_117 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010111";
    constant ap_const_lv32_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_127 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100111";
    constant ap_const_lv32_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110111";
    constant ap_const_lv32_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_147 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000111";
    constant ap_const_lv32_148 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_157 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010111";
    constant ap_const_lv32_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_177 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110111";
    constant ap_const_lv32_178 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_187 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000111";
    constant ap_const_lv32_188 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_197 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010111";
    constant ap_const_lv32_198 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100111";
    constant ap_const_lv32_1A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110111";
    constant ap_const_lv32_1B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000111";
    constant ap_const_lv32_1C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010111";
    constant ap_const_lv32_1D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100111";
    constant ap_const_lv32_1E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110111";
    constant ap_const_lv32_1F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal shift_reg_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal shift_reg_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal din_gmem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln46_reg_1938 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_gmem_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln46_reg_1938_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_gmem_V_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln46_reg_1938_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_gmem_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal icmp_ln46_reg_1938_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_gmem_V_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal icmp_ln46_reg_1938_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal size_0_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_idx_0_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_idx_0_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal dout_gmem_V_offset_c_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dout_gmem_V_offset_c_reg_1918 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_gmem_V_offset_ca_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_gmem_V_offset_ca_reg_1923 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_idx_1_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_idx_1_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln46_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln46_reg_1938_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1938_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_fu_491_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_reg_1942 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln79_reg_1947_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal size_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_idx_2_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_idx_2_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln59_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln59_reg_1973 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1979 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1985 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1992 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1998 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_2004 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_2010 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_2016 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_2022 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_2028 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_2034 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_2040 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_2046 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_2052 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_2058 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_2064 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_2070 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_2076 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_2082 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_2088 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_2094 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_2100 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_reg_2106 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_2112 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_2118 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_2124 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_reg_2130 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_2136 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_2142 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_2148 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_2154 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_reg_2160 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_2166 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_2172 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_2178 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_2184 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_reg_2190 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_2196 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_reg_2202 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_reg_2208 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_2214 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_2220 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_reg_2226 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_2232 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_2238 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_reg_2244 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_reg_2250 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_reg_2256 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_2262 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_reg_2268 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_2274 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_2280 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_reg_2286 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_2292 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_2298 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_2304 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_2310 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_reg_2316 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_reg_2322 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_2328 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_2334 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_reg_2340 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_reg_2347 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_reg_2354 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_2_fu_1182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_2_reg_2360 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_4_fu_1192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_4_reg_2365 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_6_fu_1203_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_6_reg_2370 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_8_fu_1213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_8_reg_2375 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_11_fu_1227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_11_reg_2380 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_13_fu_1237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_13_reg_2385 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_15_fu_1247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_15_reg_2390 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_17_fu_1257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_17_reg_2395 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_19_fu_1267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_19_reg_2400 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_21_fu_1277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_21_reg_2405 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_23_fu_1287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_23_reg_2410 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_25_fu_1297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_25_reg_2415 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_27_fu_1307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_27_reg_2420 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_29_fu_1317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_29_reg_2425 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_31_fu_1327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_31_reg_2430 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_33_fu_1337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_33_reg_2435 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_35_fu_1347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_35_reg_2440 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_37_fu_1357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_37_reg_2445 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_39_fu_1367_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_39_reg_2450 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_41_fu_1377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_41_reg_2455 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_43_fu_1387_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_43_reg_2460 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_45_fu_1397_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_45_reg_2465 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_47_fu_1407_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_47_reg_2470 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_49_fu_1417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_49_reg_2475 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_51_fu_1427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_51_reg_2480 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_53_fu_1437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_53_reg_2485 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_55_fu_1447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_55_reg_2490 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_57_fu_1457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_57_reg_2495 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_59_fu_1467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_59_reg_2500 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_61_fu_1477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_61_reg_2505 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_63_fu_1487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_63_reg_2510 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_65_fu_1497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_65_reg_2515 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_67_fu_1507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_67_reg_2520 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_69_fu_1517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_69_reg_2525 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_71_fu_1527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_71_reg_2530 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_73_fu_1537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_73_reg_2535 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_75_fu_1547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_75_reg_2540 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_77_fu_1557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_77_reg_2545 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_79_fu_1567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_79_reg_2550 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_81_fu_1577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_81_reg_2555 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_83_fu_1587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_83_reg_2560 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_85_fu_1597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_85_reg_2565 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_87_fu_1607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_87_reg_2570 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_89_fu_1617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_89_reg_2575 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_91_fu_1627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_91_reg_2580 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_93_fu_1637_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_93_reg_2585 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_95_fu_1647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_95_reg_2590 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_97_fu_1657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_97_reg_2595 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_99_fu_1667_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_99_reg_2600 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_101_fu_1677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_101_reg_2605 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_103_fu_1687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_103_reg_2610 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_105_fu_1697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_105_reg_2615 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_107_fu_1707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_107_reg_2620 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_109_fu_1717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_109_reg_2625 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_111_fu_1727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_111_reg_2630 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_113_fu_1737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_113_reg_2635 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_115_fu_1747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_115_reg_2640 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_117_fu_1757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_117_reg_2645 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_119_fu_1767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_119_reg_2650 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_121_fu_1777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_121_reg_2655 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_123_fu_1787_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_123_reg_2660 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_125_fu_1797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_125_reg_2665 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_127_fu_1807_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_127_reg_2670 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_129_fu_1832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_129_reg_2675 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_idx_fu_425_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal o_idx_fu_439_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_fu_463_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln56_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bytes_to_transfer_fu_479_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln56_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln75_1_fu_1177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_fu_1171_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_3_fu_1188_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_5_fu_1198_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_7_fu_1209_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_10_fu_1223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_9_fu_1219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_12_fu_1233_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_14_fu_1243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_16_fu_1253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_18_fu_1263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_20_fu_1273_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_22_fu_1283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_24_fu_1293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_26_fu_1303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_28_fu_1313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_30_fu_1323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_32_fu_1333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_34_fu_1343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_36_fu_1353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_38_fu_1363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_40_fu_1373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_42_fu_1383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_44_fu_1393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_46_fu_1403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_48_fu_1413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_50_fu_1423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_52_fu_1433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_54_fu_1443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_56_fu_1453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_58_fu_1463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_60_fu_1473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_62_fu_1483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_64_fu_1493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_66_fu_1503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_68_fu_1513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_70_fu_1523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_72_fu_1533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_74_fu_1543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_76_fu_1553_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_78_fu_1563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_80_fu_1573_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_82_fu_1583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_84_fu_1593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_86_fu_1603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_88_fu_1613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_90_fu_1623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_92_fu_1633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_94_fu_1643_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_96_fu_1653_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_98_fu_1663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_100_fu_1673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_102_fu_1683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_104_fu_1693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_106_fu_1703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_108_fu_1713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_110_fu_1723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_112_fu_1733_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_114_fu_1743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_116_fu_1753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_118_fu_1763_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_120_fu_1773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_122_fu_1783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_124_fu_1793_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_126_fu_1803_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_128_fu_1828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_idx_0_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_idx_0_reg_399 <= i_idx_2_fu_507_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_idx_0_reg_399 <= i_idx_1_fu_435_p1;
            end if; 
        end if;
    end process;

    o_idx_0_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                o_idx_0_reg_408 <= o_idx_2_fu_513_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                o_idx_0_reg_408 <= o_idx_1_fu_449_p1;
            end if; 
        end if;
    end process;

    size_0_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                size_0_reg_390 <= size_fu_501_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                size_0_reg_390 <= act_reg_Data_in_size;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_453_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln59_reg_1942 <= add_ln59_fu_491_p2;
                add_ln79_reg_1947 <= add_ln79_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1938_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln75_101_reg_2605 <= add_ln75_101_fu_1677_p2;
                add_ln75_103_reg_2610 <= add_ln75_103_fu_1687_p2;
                add_ln75_105_reg_2615 <= add_ln75_105_fu_1697_p2;
                add_ln75_107_reg_2620 <= add_ln75_107_fu_1707_p2;
                add_ln75_109_reg_2625 <= add_ln75_109_fu_1717_p2;
                add_ln75_111_reg_2630 <= add_ln75_111_fu_1727_p2;
                add_ln75_113_reg_2635 <= add_ln75_113_fu_1737_p2;
                add_ln75_115_reg_2640 <= add_ln75_115_fu_1747_p2;
                add_ln75_117_reg_2645 <= add_ln75_117_fu_1757_p2;
                add_ln75_119_reg_2650 <= add_ln75_119_fu_1767_p2;
                add_ln75_11_reg_2380 <= add_ln75_11_fu_1227_p2;
                add_ln75_121_reg_2655 <= add_ln75_121_fu_1777_p2;
                add_ln75_123_reg_2660 <= add_ln75_123_fu_1787_p2;
                add_ln75_125_reg_2665 <= add_ln75_125_fu_1797_p2;
                add_ln75_127_reg_2670 <= add_ln75_127_fu_1807_p2;
                add_ln75_129_reg_2675 <= add_ln75_129_fu_1832_p2;
                add_ln75_13_reg_2385 <= add_ln75_13_fu_1237_p2;
                add_ln75_15_reg_2390 <= add_ln75_15_fu_1247_p2;
                add_ln75_17_reg_2395 <= add_ln75_17_fu_1257_p2;
                add_ln75_19_reg_2400 <= add_ln75_19_fu_1267_p2;
                add_ln75_21_reg_2405 <= add_ln75_21_fu_1277_p2;
                add_ln75_23_reg_2410 <= add_ln75_23_fu_1287_p2;
                add_ln75_25_reg_2415 <= add_ln75_25_fu_1297_p2;
                add_ln75_27_reg_2420 <= add_ln75_27_fu_1307_p2;
                add_ln75_29_reg_2425 <= add_ln75_29_fu_1317_p2;
                add_ln75_2_reg_2360 <= add_ln75_2_fu_1182_p2;
                add_ln75_31_reg_2430 <= add_ln75_31_fu_1327_p2;
                add_ln75_33_reg_2435 <= add_ln75_33_fu_1337_p2;
                add_ln75_35_reg_2440 <= add_ln75_35_fu_1347_p2;
                add_ln75_37_reg_2445 <= add_ln75_37_fu_1357_p2;
                add_ln75_39_reg_2450 <= add_ln75_39_fu_1367_p2;
                add_ln75_41_reg_2455 <= add_ln75_41_fu_1377_p2;
                add_ln75_43_reg_2460 <= add_ln75_43_fu_1387_p2;
                add_ln75_45_reg_2465 <= add_ln75_45_fu_1397_p2;
                add_ln75_47_reg_2470 <= add_ln75_47_fu_1407_p2;
                add_ln75_49_reg_2475 <= add_ln75_49_fu_1417_p2;
                add_ln75_4_reg_2365 <= add_ln75_4_fu_1192_p2;
                add_ln75_51_reg_2480 <= add_ln75_51_fu_1427_p2;
                add_ln75_53_reg_2485 <= add_ln75_53_fu_1437_p2;
                add_ln75_55_reg_2490 <= add_ln75_55_fu_1447_p2;
                add_ln75_57_reg_2495 <= add_ln75_57_fu_1457_p2;
                add_ln75_59_reg_2500 <= add_ln75_59_fu_1467_p2;
                add_ln75_61_reg_2505 <= add_ln75_61_fu_1477_p2;
                add_ln75_63_reg_2510 <= add_ln75_63_fu_1487_p2;
                add_ln75_65_reg_2515 <= add_ln75_65_fu_1497_p2;
                add_ln75_67_reg_2520 <= add_ln75_67_fu_1507_p2;
                add_ln75_69_reg_2525 <= add_ln75_69_fu_1517_p2;
                add_ln75_6_reg_2370 <= add_ln75_6_fu_1203_p2;
                add_ln75_71_reg_2530 <= add_ln75_71_fu_1527_p2;
                add_ln75_73_reg_2535 <= add_ln75_73_fu_1537_p2;
                add_ln75_75_reg_2540 <= add_ln75_75_fu_1547_p2;
                add_ln75_77_reg_2545 <= add_ln75_77_fu_1557_p2;
                add_ln75_79_reg_2550 <= add_ln75_79_fu_1567_p2;
                add_ln75_81_reg_2555 <= add_ln75_81_fu_1577_p2;
                add_ln75_83_reg_2560 <= add_ln75_83_fu_1587_p2;
                add_ln75_85_reg_2565 <= add_ln75_85_fu_1597_p2;
                add_ln75_87_reg_2570 <= add_ln75_87_fu_1607_p2;
                add_ln75_89_reg_2575 <= add_ln75_89_fu_1617_p2;
                add_ln75_8_reg_2375 <= add_ln75_8_fu_1213_p2;
                add_ln75_91_reg_2580 <= add_ln75_91_fu_1627_p2;
                add_ln75_93_reg_2585 <= add_ln75_93_fu_1637_p2;
                add_ln75_95_reg_2590 <= add_ln75_95_fu_1647_p2;
                add_ln75_97_reg_2595 <= add_ln75_97_fu_1657_p2;
                add_ln75_99_reg_2600 <= add_ln75_99_fu_1667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln79_reg_1947_pp0_iter1_reg <= add_ln79_reg_1947;
                icmp_ln46_reg_1938 <= icmp_ln46_fu_453_p2;
                icmp_ln46_reg_1938_pp0_iter1_reg <= icmp_ln46_reg_1938;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln79_reg_1947_pp0_iter2_reg <= add_ln79_reg_1947_pp0_iter1_reg;
                add_ln79_reg_1947_pp0_iter3_reg <= add_ln79_reg_1947_pp0_iter2_reg;
                add_ln79_reg_1947_pp0_iter4_reg <= add_ln79_reg_1947_pp0_iter3_reg;
                add_ln79_reg_1947_pp0_iter5_reg <= add_ln79_reg_1947_pp0_iter4_reg;
                add_ln79_reg_1947_pp0_iter6_reg <= add_ln79_reg_1947_pp0_iter5_reg;
                add_ln79_reg_1947_pp0_iter7_reg <= add_ln79_reg_1947_pp0_iter6_reg;
                add_ln79_reg_1947_pp0_iter8_reg <= add_ln79_reg_1947_pp0_iter7_reg;
                icmp_ln46_reg_1938_pp0_iter10_reg <= icmp_ln46_reg_1938_pp0_iter9_reg;
                icmp_ln46_reg_1938_pp0_iter11_reg <= icmp_ln46_reg_1938_pp0_iter10_reg;
                icmp_ln46_reg_1938_pp0_iter12_reg <= icmp_ln46_reg_1938_pp0_iter11_reg;
                icmp_ln46_reg_1938_pp0_iter13_reg <= icmp_ln46_reg_1938_pp0_iter12_reg;
                icmp_ln46_reg_1938_pp0_iter14_reg <= icmp_ln46_reg_1938_pp0_iter13_reg;
                icmp_ln46_reg_1938_pp0_iter2_reg <= icmp_ln46_reg_1938_pp0_iter1_reg;
                icmp_ln46_reg_1938_pp0_iter3_reg <= icmp_ln46_reg_1938_pp0_iter2_reg;
                icmp_ln46_reg_1938_pp0_iter4_reg <= icmp_ln46_reg_1938_pp0_iter3_reg;
                icmp_ln46_reg_1938_pp0_iter5_reg <= icmp_ln46_reg_1938_pp0_iter4_reg;
                icmp_ln46_reg_1938_pp0_iter6_reg <= icmp_ln46_reg_1938_pp0_iter5_reg;
                icmp_ln46_reg_1938_pp0_iter7_reg <= icmp_ln46_reg_1938_pp0_iter6_reg;
                icmp_ln46_reg_1938_pp0_iter8_reg <= icmp_ln46_reg_1938_pp0_iter7_reg;
                icmp_ln46_reg_1938_pp0_iter9_reg <= icmp_ln46_reg_1938_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    din_gmem_V_offset_ca_reg_1923(57 downto 0) <= din_gmem_V_offset_ca_fu_421_p1(57 downto 0);
                    dout_gmem_V_offset_c_reg_1918(57 downto 0) <= dout_gmem_V_offset_c_fu_417_p1(57 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1938_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shift_reg_0 <= tmp_62_reg_2354;
                shift_reg_1 <= tmp_61_reg_2347;
                shift_reg_2 <= tmp_60_reg_2340;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_2040 <= m_axi_din_gmem_V_RDATA(95 downto 88);
                tmp_11_reg_2046 <= m_axi_din_gmem_V_RDATA(103 downto 96);
                tmp_12_reg_2052 <= m_axi_din_gmem_V_RDATA(111 downto 104);
                tmp_13_reg_2058 <= m_axi_din_gmem_V_RDATA(119 downto 112);
                tmp_14_reg_2064 <= m_axi_din_gmem_V_RDATA(127 downto 120);
                tmp_15_reg_2070 <= m_axi_din_gmem_V_RDATA(135 downto 128);
                tmp_16_reg_2076 <= m_axi_din_gmem_V_RDATA(143 downto 136);
                tmp_17_reg_2082 <= m_axi_din_gmem_V_RDATA(151 downto 144);
                tmp_18_reg_2088 <= m_axi_din_gmem_V_RDATA(159 downto 152);
                tmp_19_reg_2094 <= m_axi_din_gmem_V_RDATA(167 downto 160);
                tmp_1_reg_1979 <= m_axi_din_gmem_V_RDATA(15 downto 8);
                tmp_20_reg_2100 <= m_axi_din_gmem_V_RDATA(175 downto 168);
                tmp_21_reg_2106 <= m_axi_din_gmem_V_RDATA(183 downto 176);
                tmp_22_reg_2112 <= m_axi_din_gmem_V_RDATA(191 downto 184);
                tmp_23_reg_2118 <= m_axi_din_gmem_V_RDATA(199 downto 192);
                tmp_24_reg_2124 <= m_axi_din_gmem_V_RDATA(207 downto 200);
                tmp_25_reg_2130 <= m_axi_din_gmem_V_RDATA(215 downto 208);
                tmp_26_reg_2136 <= m_axi_din_gmem_V_RDATA(223 downto 216);
                tmp_27_reg_2142 <= m_axi_din_gmem_V_RDATA(231 downto 224);
                tmp_28_reg_2148 <= m_axi_din_gmem_V_RDATA(239 downto 232);
                tmp_29_reg_2154 <= m_axi_din_gmem_V_RDATA(247 downto 240);
                tmp_2_reg_1985 <= m_axi_din_gmem_V_RDATA(23 downto 16);
                tmp_30_reg_2160 <= m_axi_din_gmem_V_RDATA(255 downto 248);
                tmp_31_reg_2166 <= m_axi_din_gmem_V_RDATA(263 downto 256);
                tmp_32_reg_2172 <= m_axi_din_gmem_V_RDATA(271 downto 264);
                tmp_33_reg_2178 <= m_axi_din_gmem_V_RDATA(279 downto 272);
                tmp_34_reg_2184 <= m_axi_din_gmem_V_RDATA(287 downto 280);
                tmp_35_reg_2190 <= m_axi_din_gmem_V_RDATA(295 downto 288);
                tmp_36_reg_2196 <= m_axi_din_gmem_V_RDATA(303 downto 296);
                tmp_37_reg_2202 <= m_axi_din_gmem_V_RDATA(311 downto 304);
                tmp_38_reg_2208 <= m_axi_din_gmem_V_RDATA(319 downto 312);
                tmp_39_reg_2214 <= m_axi_din_gmem_V_RDATA(327 downto 320);
                tmp_3_reg_1992 <= m_axi_din_gmem_V_RDATA(31 downto 24);
                tmp_40_reg_2220 <= m_axi_din_gmem_V_RDATA(335 downto 328);
                tmp_41_reg_2226 <= m_axi_din_gmem_V_RDATA(343 downto 336);
                tmp_42_reg_2232 <= m_axi_din_gmem_V_RDATA(351 downto 344);
                tmp_43_reg_2238 <= m_axi_din_gmem_V_RDATA(359 downto 352);
                tmp_44_reg_2244 <= m_axi_din_gmem_V_RDATA(367 downto 360);
                tmp_45_reg_2250 <= m_axi_din_gmem_V_RDATA(375 downto 368);
                tmp_46_reg_2256 <= m_axi_din_gmem_V_RDATA(383 downto 376);
                tmp_47_reg_2262 <= m_axi_din_gmem_V_RDATA(391 downto 384);
                tmp_48_reg_2268 <= m_axi_din_gmem_V_RDATA(399 downto 392);
                tmp_49_reg_2274 <= m_axi_din_gmem_V_RDATA(407 downto 400);
                tmp_4_reg_1998 <= m_axi_din_gmem_V_RDATA(39 downto 32);
                tmp_50_reg_2280 <= m_axi_din_gmem_V_RDATA(415 downto 408);
                tmp_51_reg_2286 <= m_axi_din_gmem_V_RDATA(423 downto 416);
                tmp_52_reg_2292 <= m_axi_din_gmem_V_RDATA(431 downto 424);
                tmp_53_reg_2298 <= m_axi_din_gmem_V_RDATA(439 downto 432);
                tmp_54_reg_2304 <= m_axi_din_gmem_V_RDATA(447 downto 440);
                tmp_55_reg_2310 <= m_axi_din_gmem_V_RDATA(455 downto 448);
                tmp_56_reg_2316 <= m_axi_din_gmem_V_RDATA(463 downto 456);
                tmp_57_reg_2322 <= m_axi_din_gmem_V_RDATA(471 downto 464);
                tmp_58_reg_2328 <= m_axi_din_gmem_V_RDATA(479 downto 472);
                tmp_59_reg_2334 <= m_axi_din_gmem_V_RDATA(487 downto 480);
                tmp_5_reg_2004 <= m_axi_din_gmem_V_RDATA(47 downto 40);
                tmp_60_reg_2340 <= m_axi_din_gmem_V_RDATA(495 downto 488);
                tmp_61_reg_2347 <= m_axi_din_gmem_V_RDATA(503 downto 496);
                tmp_62_reg_2354 <= m_axi_din_gmem_V_RDATA(511 downto 504);
                tmp_6_reg_2010 <= m_axi_din_gmem_V_RDATA(55 downto 48);
                tmp_7_reg_2016 <= m_axi_din_gmem_V_RDATA(63 downto 56);
                tmp_8_reg_2022 <= m_axi_din_gmem_V_RDATA(71 downto 64);
                tmp_9_reg_2028 <= m_axi_din_gmem_V_RDATA(79 downto 72);
                tmp_s_reg_2034 <= m_axi_din_gmem_V_RDATA(87 downto 80);
                trunc_ln59_reg_1973 <= trunc_ln59_fu_525_p1;
            end if;
        end if;
    end process;
    dout_gmem_V_offset_c_reg_1918(63 downto 58) <= "000000";
    din_gmem_V_offset_ca_reg_1923(63 downto 58) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, icmp_ln46_fu_453_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_453_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_453_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln59_fu_491_p2 <= std_logic_vector(unsigned(din_gmem_V_offset_ca_reg_1923) + unsigned(i_idx_0_reg_399));
    add_ln75_100_fu_1673_p2 <= std_logic_vector(unsigned(tmp_48_reg_2268) + unsigned(tmp_47_reg_2262));
    add_ln75_101_fu_1677_p2 <= std_logic_vector(unsigned(add_ln75_96_fu_1653_p2) + unsigned(add_ln75_100_fu_1673_p2));
    add_ln75_102_fu_1683_p2 <= std_logic_vector(unsigned(tmp_49_reg_2274) + unsigned(tmp_48_reg_2268));
    add_ln75_103_fu_1687_p2 <= std_logic_vector(unsigned(add_ln75_98_fu_1663_p2) + unsigned(add_ln75_102_fu_1683_p2));
    add_ln75_104_fu_1693_p2 <= std_logic_vector(unsigned(tmp_50_reg_2280) + unsigned(tmp_49_reg_2274));
    add_ln75_105_fu_1697_p2 <= std_logic_vector(unsigned(add_ln75_100_fu_1673_p2) + unsigned(add_ln75_104_fu_1693_p2));
    add_ln75_106_fu_1703_p2 <= std_logic_vector(unsigned(tmp_51_reg_2286) + unsigned(tmp_50_reg_2280));
    add_ln75_107_fu_1707_p2 <= std_logic_vector(unsigned(add_ln75_102_fu_1683_p2) + unsigned(add_ln75_106_fu_1703_p2));
    add_ln75_108_fu_1713_p2 <= std_logic_vector(unsigned(tmp_52_reg_2292) + unsigned(tmp_51_reg_2286));
    add_ln75_109_fu_1717_p2 <= std_logic_vector(unsigned(add_ln75_104_fu_1693_p2) + unsigned(add_ln75_108_fu_1713_p2));
    add_ln75_10_fu_1223_p2 <= std_logic_vector(unsigned(tmp_2_reg_1985) + unsigned(tmp_1_reg_1979));
    add_ln75_110_fu_1723_p2 <= std_logic_vector(unsigned(tmp_53_reg_2298) + unsigned(tmp_52_reg_2292));
    add_ln75_111_fu_1727_p2 <= std_logic_vector(unsigned(add_ln75_106_fu_1703_p2) + unsigned(add_ln75_110_fu_1723_p2));
    add_ln75_112_fu_1733_p2 <= std_logic_vector(unsigned(tmp_54_reg_2304) + unsigned(tmp_53_reg_2298));
    add_ln75_113_fu_1737_p2 <= std_logic_vector(unsigned(add_ln75_108_fu_1713_p2) + unsigned(add_ln75_112_fu_1733_p2));
    add_ln75_114_fu_1743_p2 <= std_logic_vector(unsigned(tmp_55_reg_2310) + unsigned(tmp_54_reg_2304));
    add_ln75_115_fu_1747_p2 <= std_logic_vector(unsigned(add_ln75_110_fu_1723_p2) + unsigned(add_ln75_114_fu_1743_p2));
    add_ln75_116_fu_1753_p2 <= std_logic_vector(unsigned(tmp_56_reg_2316) + unsigned(tmp_55_reg_2310));
    add_ln75_117_fu_1757_p2 <= std_logic_vector(unsigned(add_ln75_112_fu_1733_p2) + unsigned(add_ln75_116_fu_1753_p2));
    add_ln75_118_fu_1763_p2 <= std_logic_vector(unsigned(tmp_57_reg_2322) + unsigned(tmp_56_reg_2316));
    add_ln75_119_fu_1767_p2 <= std_logic_vector(unsigned(add_ln75_114_fu_1743_p2) + unsigned(add_ln75_118_fu_1763_p2));
    add_ln75_11_fu_1227_p2 <= std_logic_vector(unsigned(add_ln75_10_fu_1223_p2) + unsigned(add_ln75_9_fu_1219_p2));
    add_ln75_120_fu_1773_p2 <= std_logic_vector(unsigned(tmp_58_reg_2328) + unsigned(tmp_57_reg_2322));
    add_ln75_121_fu_1777_p2 <= std_logic_vector(unsigned(add_ln75_116_fu_1753_p2) + unsigned(add_ln75_120_fu_1773_p2));
    add_ln75_122_fu_1783_p2 <= std_logic_vector(unsigned(tmp_59_reg_2334) + unsigned(tmp_58_reg_2328));
    add_ln75_123_fu_1787_p2 <= std_logic_vector(unsigned(add_ln75_118_fu_1763_p2) + unsigned(add_ln75_122_fu_1783_p2));
    add_ln75_124_fu_1793_p2 <= std_logic_vector(unsigned(tmp_60_reg_2340) + unsigned(tmp_59_reg_2334));
    add_ln75_125_fu_1797_p2 <= std_logic_vector(unsigned(add_ln75_120_fu_1773_p2) + unsigned(add_ln75_124_fu_1793_p2));
    add_ln75_126_fu_1803_p2 <= std_logic_vector(unsigned(tmp_61_reg_2347) + unsigned(tmp_60_reg_2340));
    add_ln75_127_fu_1807_p2 <= std_logic_vector(unsigned(add_ln75_122_fu_1783_p2) + unsigned(add_ln75_126_fu_1803_p2));
    add_ln75_128_fu_1828_p2 <= std_logic_vector(unsigned(tmp_62_reg_2354) + unsigned(tmp_61_reg_2347));
    add_ln75_129_fu_1832_p2 <= std_logic_vector(unsigned(add_ln75_124_fu_1793_p2) + unsigned(add_ln75_128_fu_1828_p2));
    add_ln75_12_fu_1233_p2 <= std_logic_vector(unsigned(tmp_5_reg_2004) + unsigned(tmp_4_reg_1998));
    add_ln75_13_fu_1237_p2 <= std_logic_vector(unsigned(add_ln75_7_fu_1209_p2) + unsigned(add_ln75_12_fu_1233_p2));
    add_ln75_14_fu_1243_p2 <= std_logic_vector(unsigned(tmp_6_reg_2010) + unsigned(tmp_5_reg_2004));
    add_ln75_15_fu_1247_p2 <= std_logic_vector(unsigned(add_ln75_9_fu_1219_p2) + unsigned(add_ln75_14_fu_1243_p2));
    add_ln75_16_fu_1253_p2 <= std_logic_vector(unsigned(tmp_7_reg_2016) + unsigned(tmp_6_reg_2010));
    add_ln75_17_fu_1257_p2 <= std_logic_vector(unsigned(add_ln75_12_fu_1233_p2) + unsigned(add_ln75_16_fu_1253_p2));
    add_ln75_18_fu_1263_p2 <= std_logic_vector(unsigned(tmp_8_reg_2022) + unsigned(tmp_7_reg_2016));
    add_ln75_19_fu_1267_p2 <= std_logic_vector(unsigned(add_ln75_14_fu_1243_p2) + unsigned(add_ln75_18_fu_1263_p2));
    add_ln75_1_fu_1177_p2 <= std_logic_vector(unsigned(shift_reg_2) + unsigned(trunc_ln59_reg_1973));
    add_ln75_20_fu_1273_p2 <= std_logic_vector(unsigned(tmp_9_reg_2028) + unsigned(tmp_8_reg_2022));
    add_ln75_21_fu_1277_p2 <= std_logic_vector(unsigned(add_ln75_16_fu_1253_p2) + unsigned(add_ln75_20_fu_1273_p2));
    add_ln75_22_fu_1283_p2 <= std_logic_vector(unsigned(tmp_s_reg_2034) + unsigned(tmp_9_reg_2028));
    add_ln75_23_fu_1287_p2 <= std_logic_vector(unsigned(add_ln75_18_fu_1263_p2) + unsigned(add_ln75_22_fu_1283_p2));
    add_ln75_24_fu_1293_p2 <= std_logic_vector(unsigned(tmp_10_reg_2040) + unsigned(tmp_s_reg_2034));
    add_ln75_25_fu_1297_p2 <= std_logic_vector(unsigned(add_ln75_20_fu_1273_p2) + unsigned(add_ln75_24_fu_1293_p2));
    add_ln75_26_fu_1303_p2 <= std_logic_vector(unsigned(tmp_11_reg_2046) + unsigned(tmp_10_reg_2040));
    add_ln75_27_fu_1307_p2 <= std_logic_vector(unsigned(add_ln75_22_fu_1283_p2) + unsigned(add_ln75_26_fu_1303_p2));
    add_ln75_28_fu_1313_p2 <= std_logic_vector(unsigned(tmp_12_reg_2052) + unsigned(tmp_11_reg_2046));
    add_ln75_29_fu_1317_p2 <= std_logic_vector(unsigned(add_ln75_24_fu_1293_p2) + unsigned(add_ln75_28_fu_1313_p2));
    add_ln75_2_fu_1182_p2 <= std_logic_vector(unsigned(add_ln75_1_fu_1177_p2) + unsigned(add_ln75_fu_1171_p2));
    add_ln75_30_fu_1323_p2 <= std_logic_vector(unsigned(tmp_13_reg_2058) + unsigned(tmp_12_reg_2052));
    add_ln75_31_fu_1327_p2 <= std_logic_vector(unsigned(add_ln75_26_fu_1303_p2) + unsigned(add_ln75_30_fu_1323_p2));
    add_ln75_32_fu_1333_p2 <= std_logic_vector(unsigned(tmp_14_reg_2064) + unsigned(tmp_13_reg_2058));
    add_ln75_33_fu_1337_p2 <= std_logic_vector(unsigned(add_ln75_28_fu_1313_p2) + unsigned(add_ln75_32_fu_1333_p2));
    add_ln75_34_fu_1343_p2 <= std_logic_vector(unsigned(tmp_15_reg_2070) + unsigned(tmp_14_reg_2064));
    add_ln75_35_fu_1347_p2 <= std_logic_vector(unsigned(add_ln75_30_fu_1323_p2) + unsigned(add_ln75_34_fu_1343_p2));
    add_ln75_36_fu_1353_p2 <= std_logic_vector(unsigned(tmp_16_reg_2076) + unsigned(tmp_15_reg_2070));
    add_ln75_37_fu_1357_p2 <= std_logic_vector(unsigned(add_ln75_32_fu_1333_p2) + unsigned(add_ln75_36_fu_1353_p2));
    add_ln75_38_fu_1363_p2 <= std_logic_vector(unsigned(tmp_17_reg_2082) + unsigned(tmp_16_reg_2076));
    add_ln75_39_fu_1367_p2 <= std_logic_vector(unsigned(add_ln75_34_fu_1343_p2) + unsigned(add_ln75_38_fu_1363_p2));
    add_ln75_3_fu_1188_p2 <= std_logic_vector(unsigned(tmp_1_reg_1979) + unsigned(trunc_ln59_reg_1973));
    add_ln75_40_fu_1373_p2 <= std_logic_vector(unsigned(tmp_18_reg_2088) + unsigned(tmp_17_reg_2082));
    add_ln75_41_fu_1377_p2 <= std_logic_vector(unsigned(add_ln75_36_fu_1353_p2) + unsigned(add_ln75_40_fu_1373_p2));
    add_ln75_42_fu_1383_p2 <= std_logic_vector(unsigned(tmp_19_reg_2094) + unsigned(tmp_18_reg_2088));
    add_ln75_43_fu_1387_p2 <= std_logic_vector(unsigned(add_ln75_38_fu_1363_p2) + unsigned(add_ln75_42_fu_1383_p2));
    add_ln75_44_fu_1393_p2 <= std_logic_vector(unsigned(tmp_20_reg_2100) + unsigned(tmp_19_reg_2094));
    add_ln75_45_fu_1397_p2 <= std_logic_vector(unsigned(add_ln75_40_fu_1373_p2) + unsigned(add_ln75_44_fu_1393_p2));
    add_ln75_46_fu_1403_p2 <= std_logic_vector(unsigned(tmp_21_reg_2106) + unsigned(tmp_20_reg_2100));
    add_ln75_47_fu_1407_p2 <= std_logic_vector(unsigned(add_ln75_42_fu_1383_p2) + unsigned(add_ln75_46_fu_1403_p2));
    add_ln75_48_fu_1413_p2 <= std_logic_vector(unsigned(tmp_22_reg_2112) + unsigned(tmp_21_reg_2106));
    add_ln75_49_fu_1417_p2 <= std_logic_vector(unsigned(add_ln75_44_fu_1393_p2) + unsigned(add_ln75_48_fu_1413_p2));
    add_ln75_4_fu_1192_p2 <= std_logic_vector(unsigned(add_ln75_3_fu_1188_p2) + unsigned(add_ln75_fu_1171_p2));
    add_ln75_50_fu_1423_p2 <= std_logic_vector(unsigned(tmp_23_reg_2118) + unsigned(tmp_22_reg_2112));
    add_ln75_51_fu_1427_p2 <= std_logic_vector(unsigned(add_ln75_46_fu_1403_p2) + unsigned(add_ln75_50_fu_1423_p2));
    add_ln75_52_fu_1433_p2 <= std_logic_vector(unsigned(tmp_24_reg_2124) + unsigned(tmp_23_reg_2118));
    add_ln75_53_fu_1437_p2 <= std_logic_vector(unsigned(add_ln75_48_fu_1413_p2) + unsigned(add_ln75_52_fu_1433_p2));
    add_ln75_54_fu_1443_p2 <= std_logic_vector(unsigned(tmp_25_reg_2130) + unsigned(tmp_24_reg_2124));
    add_ln75_55_fu_1447_p2 <= std_logic_vector(unsigned(add_ln75_50_fu_1423_p2) + unsigned(add_ln75_54_fu_1443_p2));
    add_ln75_56_fu_1453_p2 <= std_logic_vector(unsigned(tmp_26_reg_2136) + unsigned(tmp_25_reg_2130));
    add_ln75_57_fu_1457_p2 <= std_logic_vector(unsigned(add_ln75_52_fu_1433_p2) + unsigned(add_ln75_56_fu_1453_p2));
    add_ln75_58_fu_1463_p2 <= std_logic_vector(unsigned(tmp_27_reg_2142) + unsigned(tmp_26_reg_2136));
    add_ln75_59_fu_1467_p2 <= std_logic_vector(unsigned(add_ln75_54_fu_1443_p2) + unsigned(add_ln75_58_fu_1463_p2));
    add_ln75_5_fu_1198_p2 <= std_logic_vector(unsigned(shift_reg_0) + unsigned(tmp_2_reg_1985));
    add_ln75_60_fu_1473_p2 <= std_logic_vector(unsigned(tmp_28_reg_2148) + unsigned(tmp_27_reg_2142));
    add_ln75_61_fu_1477_p2 <= std_logic_vector(unsigned(add_ln75_56_fu_1453_p2) + unsigned(add_ln75_60_fu_1473_p2));
    add_ln75_62_fu_1483_p2 <= std_logic_vector(unsigned(tmp_29_reg_2154) + unsigned(tmp_28_reg_2148));
    add_ln75_63_fu_1487_p2 <= std_logic_vector(unsigned(add_ln75_58_fu_1463_p2) + unsigned(add_ln75_62_fu_1483_p2));
    add_ln75_64_fu_1493_p2 <= std_logic_vector(unsigned(tmp_30_reg_2160) + unsigned(tmp_29_reg_2154));
    add_ln75_65_fu_1497_p2 <= std_logic_vector(unsigned(add_ln75_60_fu_1473_p2) + unsigned(add_ln75_64_fu_1493_p2));
    add_ln75_66_fu_1503_p2 <= std_logic_vector(unsigned(tmp_31_reg_2166) + unsigned(tmp_30_reg_2160));
    add_ln75_67_fu_1507_p2 <= std_logic_vector(unsigned(add_ln75_62_fu_1483_p2) + unsigned(add_ln75_66_fu_1503_p2));
    add_ln75_68_fu_1513_p2 <= std_logic_vector(unsigned(tmp_32_reg_2172) + unsigned(tmp_31_reg_2166));
    add_ln75_69_fu_1517_p2 <= std_logic_vector(unsigned(add_ln75_64_fu_1493_p2) + unsigned(add_ln75_68_fu_1513_p2));
    add_ln75_6_fu_1203_p2 <= std_logic_vector(unsigned(add_ln75_3_fu_1188_p2) + unsigned(add_ln75_5_fu_1198_p2));
    add_ln75_70_fu_1523_p2 <= std_logic_vector(unsigned(tmp_33_reg_2178) + unsigned(tmp_32_reg_2172));
    add_ln75_71_fu_1527_p2 <= std_logic_vector(unsigned(add_ln75_66_fu_1503_p2) + unsigned(add_ln75_70_fu_1523_p2));
    add_ln75_72_fu_1533_p2 <= std_logic_vector(unsigned(tmp_34_reg_2184) + unsigned(tmp_33_reg_2178));
    add_ln75_73_fu_1537_p2 <= std_logic_vector(unsigned(add_ln75_68_fu_1513_p2) + unsigned(add_ln75_72_fu_1533_p2));
    add_ln75_74_fu_1543_p2 <= std_logic_vector(unsigned(tmp_35_reg_2190) + unsigned(tmp_34_reg_2184));
    add_ln75_75_fu_1547_p2 <= std_logic_vector(unsigned(add_ln75_70_fu_1523_p2) + unsigned(add_ln75_74_fu_1543_p2));
    add_ln75_76_fu_1553_p2 <= std_logic_vector(unsigned(tmp_36_reg_2196) + unsigned(tmp_35_reg_2190));
    add_ln75_77_fu_1557_p2 <= std_logic_vector(unsigned(add_ln75_72_fu_1533_p2) + unsigned(add_ln75_76_fu_1553_p2));
    add_ln75_78_fu_1563_p2 <= std_logic_vector(unsigned(tmp_37_reg_2202) + unsigned(tmp_36_reg_2196));
    add_ln75_79_fu_1567_p2 <= std_logic_vector(unsigned(add_ln75_74_fu_1543_p2) + unsigned(add_ln75_78_fu_1563_p2));
    add_ln75_7_fu_1209_p2 <= std_logic_vector(unsigned(tmp_3_reg_1992) + unsigned(tmp_2_reg_1985));
    add_ln75_80_fu_1573_p2 <= std_logic_vector(unsigned(tmp_38_reg_2208) + unsigned(tmp_37_reg_2202));
    add_ln75_81_fu_1577_p2 <= std_logic_vector(unsigned(add_ln75_76_fu_1553_p2) + unsigned(add_ln75_80_fu_1573_p2));
    add_ln75_82_fu_1583_p2 <= std_logic_vector(unsigned(tmp_39_reg_2214) + unsigned(tmp_38_reg_2208));
    add_ln75_83_fu_1587_p2 <= std_logic_vector(unsigned(add_ln75_78_fu_1563_p2) + unsigned(add_ln75_82_fu_1583_p2));
    add_ln75_84_fu_1593_p2 <= std_logic_vector(unsigned(tmp_40_reg_2220) + unsigned(tmp_39_reg_2214));
    add_ln75_85_fu_1597_p2 <= std_logic_vector(unsigned(add_ln75_80_fu_1573_p2) + unsigned(add_ln75_84_fu_1593_p2));
    add_ln75_86_fu_1603_p2 <= std_logic_vector(unsigned(tmp_41_reg_2226) + unsigned(tmp_40_reg_2220));
    add_ln75_87_fu_1607_p2 <= std_logic_vector(unsigned(add_ln75_82_fu_1583_p2) + unsigned(add_ln75_86_fu_1603_p2));
    add_ln75_88_fu_1613_p2 <= std_logic_vector(unsigned(tmp_42_reg_2232) + unsigned(tmp_41_reg_2226));
    add_ln75_89_fu_1617_p2 <= std_logic_vector(unsigned(add_ln75_84_fu_1593_p2) + unsigned(add_ln75_88_fu_1613_p2));
    add_ln75_8_fu_1213_p2 <= std_logic_vector(unsigned(add_ln75_3_fu_1188_p2) + unsigned(add_ln75_7_fu_1209_p2));
    add_ln75_90_fu_1623_p2 <= std_logic_vector(unsigned(tmp_43_reg_2238) + unsigned(tmp_42_reg_2232));
    add_ln75_91_fu_1627_p2 <= std_logic_vector(unsigned(add_ln75_86_fu_1603_p2) + unsigned(add_ln75_90_fu_1623_p2));
    add_ln75_92_fu_1633_p2 <= std_logic_vector(unsigned(tmp_44_reg_2244) + unsigned(tmp_43_reg_2238));
    add_ln75_93_fu_1637_p2 <= std_logic_vector(unsigned(add_ln75_88_fu_1613_p2) + unsigned(add_ln75_92_fu_1633_p2));
    add_ln75_94_fu_1643_p2 <= std_logic_vector(unsigned(tmp_45_reg_2250) + unsigned(tmp_44_reg_2244));
    add_ln75_95_fu_1647_p2 <= std_logic_vector(unsigned(add_ln75_90_fu_1623_p2) + unsigned(add_ln75_94_fu_1643_p2));
    add_ln75_96_fu_1653_p2 <= std_logic_vector(unsigned(tmp_46_reg_2256) + unsigned(tmp_45_reg_2250));
    add_ln75_97_fu_1657_p2 <= std_logic_vector(unsigned(add_ln75_92_fu_1633_p2) + unsigned(add_ln75_96_fu_1653_p2));
    add_ln75_98_fu_1663_p2 <= std_logic_vector(unsigned(tmp_47_reg_2262) + unsigned(tmp_46_reg_2256));
    add_ln75_99_fu_1667_p2 <= std_logic_vector(unsigned(add_ln75_94_fu_1643_p2) + unsigned(add_ln75_98_fu_1663_p2));
    add_ln75_9_fu_1219_p2 <= std_logic_vector(unsigned(tmp_4_reg_1998) + unsigned(tmp_3_reg_1992));
    add_ln75_fu_1171_p2 <= std_logic_vector(unsigned(shift_reg_0) + unsigned(shift_reg_1));
    add_ln79_fu_496_p2 <= std_logic_vector(unsigned(dout_gmem_V_offset_c_reg_1918) + unsigned(o_idx_0_reg_408));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_din_gmem_V_RVALID, m_axi_din_gmem_V_BVALID, ap_enable_reg_pp0_iter8, icmp_ln46_reg_1938_pp0_iter7_reg, ap_enable_reg_pp0_iter15, icmp_ln46_reg_1938_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_din_gmem_V_RVALID, m_axi_din_gmem_V_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln46_reg_1938_pp0_iter7_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, icmp_ln46_reg_1938_pp0_iter14_reg, ap_block_state3_io, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_io)) or ((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_din_gmem_V_RVALID, m_axi_din_gmem_V_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln46_reg_1938_pp0_iter7_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, icmp_ln46_reg_1938_pp0_iter14_reg, ap_block_state3_io, ap_block_state11_io, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_io)) or ((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_din_gmem_V_RVALID, icmp_ln46_reg_1938_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(m_axi_din_gmem_V_AWREADY, icmp_ln46_reg_1938_pp0_iter8_reg)
    begin
                ap_block_state11_io <= ((icmp_ln46_reg_1938_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(m_axi_din_gmem_V_WREADY, icmp_ln46_reg_1938_pp0_iter9_reg)
    begin
                ap_block_state12_io <= ((icmp_ln46_reg_1938_pp0_iter9_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter15_assign_proc : process(m_axi_din_gmem_V_BVALID, icmp_ln46_reg_1938_pp0_iter14_reg)
    begin
                ap_block_state17_pp0_stage0_iter15 <= ((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (m_axi_din_gmem_V_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_din_gmem_V_ARREADY, icmp_ln46_reg_1938)
    begin
                ap_block_state3_io <= ((icmp_ln46_reg_1938 = ap_const_lv1_0) and (m_axi_din_gmem_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln46_fu_453_p2)
    begin
        if ((icmp_ln46_fu_453_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bytes_to_transfer_fu_479_p3 <= 
        trunc_ln46_fu_459_p1 when (icmp_ln56_fu_473_p2(0) = '1') else 
        ap_const_lv7_40;

    din_gmem_V_blk_n_AR_assign_proc : process(m_axi_din_gmem_V_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln46_reg_1938)
    begin
        if (((icmp_ln46_reg_1938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            din_gmem_V_blk_n_AR <= m_axi_din_gmem_V_ARREADY;
        else 
            din_gmem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_AW_assign_proc : process(m_axi_din_gmem_V_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln46_reg_1938_pp0_iter8_reg)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            din_gmem_V_blk_n_AW <= m_axi_din_gmem_V_AWREADY;
        else 
            din_gmem_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_B_assign_proc : process(m_axi_din_gmem_V_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, icmp_ln46_reg_1938_pp0_iter14_reg)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            din_gmem_V_blk_n_B <= m_axi_din_gmem_V_BVALID;
        else 
            din_gmem_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_R_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln46_reg_1938_pp0_iter7_reg)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            din_gmem_V_blk_n_R <= m_axi_din_gmem_V_RVALID;
        else 
            din_gmem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_W_assign_proc : process(m_axi_din_gmem_V_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln46_reg_1938_pp0_iter9_reg)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            din_gmem_V_blk_n_W <= m_axi_din_gmem_V_WREADY;
        else 
            din_gmem_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    din_gmem_V_offset_ca_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(din_gmem_V_offset),64));
    dout_gmem_V_offset_c_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dout_gmem_V_offset),64));
    i_idx_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_idx_fu_425_p4),64));
    i_idx_2_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_idx_0_reg_399));
    i_idx_fu_425_p4 <= act_reg_Data_in_addr(63 downto 6);
    icmp_ln46_fu_453_p2 <= "1" when (size_0_reg_390 = ap_const_lv32_0) else "0";
    icmp_ln56_fu_473_p2 <= "1" when (tmp_fu_463_p4 = ap_const_lv26_0) else "0";
    m_axi_din_gmem_V_ARADDR <= add_ln59_reg_1942;
    m_axi_din_gmem_V_ARBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARID <= ap_const_lv1_0;
    m_axi_din_gmem_V_ARLEN <= ap_const_lv32_1;
    m_axi_din_gmem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln46_reg_1938, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_1938 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_AWADDR <= add_ln79_reg_1947_pp0_iter8_reg;
    m_axi_din_gmem_V_AWBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWID <= ap_const_lv1_0;
    m_axi_din_gmem_V_AWLEN <= ap_const_lv32_1;
    m_axi_din_gmem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln46_reg_1938_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_din_gmem_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_din_gmem_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln46_reg_1938_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_din_gmem_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_din_gmem_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln46_reg_1938_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_WDATA <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((add_ln75_129_reg_2675 & add_ln75_127_reg_2670) & add_ln75_125_reg_2665) & add_ln75_123_reg_2660) & add_ln75_121_reg_2655) & add_ln75_119_reg_2650) & add_ln75_117_reg_2645) & add_ln75_115_reg_2640) & add_ln75_113_reg_2635) & add_ln75_111_reg_2630) & add_ln75_109_reg_2625) & add_ln75_107_reg_2620) & add_ln75_105_reg_2615) & add_ln75_103_reg_2610) & add_ln75_101_reg_2605) & add_ln75_99_reg_2600) & add_ln75_97_reg_2595) & add_ln75_95_reg_2590) & add_ln75_93_reg_2585) & add_ln75_91_reg_2580) & add_ln75_89_reg_2575) & add_ln75_87_reg_2570) & add_ln75_85_reg_2565) & add_ln75_83_reg_2560) & add_ln75_81_reg_2555) & add_ln75_79_reg_2550) & add_ln75_77_reg_2545) & add_ln75_75_reg_2540) & add_ln75_73_reg_2535) & add_ln75_71_reg_2530) & add_ln75_69_reg_2525) & add_ln75_67_reg_2520) & add_ln75_65_reg_2515) & add_ln75_63_reg_2510) & add_ln75_61_reg_2505) & add_ln75_59_reg_2500) & add_ln75_57_reg_2495) & add_ln75_55_reg_2490) & add_ln75_53_reg_2485) & add_ln75_51_reg_2480) & add_ln75_49_reg_2475) & add_ln75_47_reg_2470) & add_ln75_45_reg_2465) & add_ln75_43_reg_2460) & add_ln75_41_reg_2455) & add_ln75_39_reg_2450) & add_ln75_37_reg_2445) & add_ln75_35_reg_2440) & add_ln75_33_reg_2435) & add_ln75_31_reg_2430) & add_ln75_29_reg_2425) & add_ln75_27_reg_2420) & add_ln75_25_reg_2415) & add_ln75_23_reg_2410) & add_ln75_21_reg_2405) & add_ln75_19_reg_2400) & add_ln75_17_reg_2395) & add_ln75_15_reg_2390) & add_ln75_13_reg_2385) & add_ln75_11_reg_2380) & add_ln75_8_reg_2375) & add_ln75_6_reg_2370) & add_ln75_4_reg_2365) & add_ln75_2_reg_2360);
    m_axi_din_gmem_V_WID <= ap_const_lv1_0;
    m_axi_din_gmem_V_WLAST <= ap_const_logic_0;
    m_axi_din_gmem_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_din_gmem_V_WUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter10, icmp_ln46_reg_1938_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln46_reg_1938_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_din_gmem_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    o_idx_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_idx_fu_439_p4),64));
    o_idx_2_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(o_idx_0_reg_408));
    o_idx_fu_439_p4 <= act_reg_Data_out_add(63 downto 6);
    size_fu_501_p2 <= std_logic_vector(unsigned(size_0_reg_390) - unsigned(zext_ln56_fu_487_p1));
    tmp_fu_463_p4 <= size_0_reg_390(31 downto 6);
    trunc_ln46_fu_459_p1 <= size_0_reg_390(7 - 1 downto 0);
    trunc_ln59_fu_525_p1 <= m_axi_din_gmem_V_RDATA(8 - 1 downto 0);
    zext_ln56_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bytes_to_transfer_fu_479_p3),32));
end behav;
